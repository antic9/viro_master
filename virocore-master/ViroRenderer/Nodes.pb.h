// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Nodes.proto

#ifndef PROTOBUF_Nodes_2eproto__INCLUDED
#define PROTOBUF_Nodes_2eproto__INCLUDED

#include <string>
#include "VRODefines.h"
#if VRO_PLATFORM_IOS || VRO_PLATFORM_MACOS
#define google google_public
#endif

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace viro {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Node_Camera;
class Node_CameraDefaultTypeInternal;
extern Node_CameraDefaultTypeInternal _Node_Camera_default_instance_;
class Node_Geometry;
class Node_GeometryDefaultTypeInternal;
extern Node_GeometryDefaultTypeInternal _Node_Geometry_default_instance_;
class Node_Geometry_Element;
class Node_Geometry_ElementDefaultTypeInternal;
extern Node_Geometry_ElementDefaultTypeInternal _Node_Geometry_Element_default_instance_;
class Node_Geometry_Material;
class Node_Geometry_MaterialDefaultTypeInternal;
extern Node_Geometry_MaterialDefaultTypeInternal _Node_Geometry_Material_default_instance_;
class Node_Geometry_Material_Visual;
class Node_Geometry_Material_VisualDefaultTypeInternal;
extern Node_Geometry_Material_VisualDefaultTypeInternal _Node_Geometry_Material_Visual_default_instance_;
class Node_Geometry_Skin;
class Node_Geometry_SkinDefaultTypeInternal;
extern Node_Geometry_SkinDefaultTypeInternal _Node_Geometry_Skin_default_instance_;
class Node_Geometry_Source;
class Node_Geometry_SourceDefaultTypeInternal;
extern Node_Geometry_SourceDefaultTypeInternal _Node_Geometry_Source_default_instance_;
class Node_KeyframeAnimation;
class Node_KeyframeAnimationDefaultTypeInternal;
extern Node_KeyframeAnimationDefaultTypeInternal _Node_KeyframeAnimation_default_instance_;
class Node_KeyframeAnimation_Frame;
class Node_KeyframeAnimation_FrameDefaultTypeInternal;
extern Node_KeyframeAnimation_FrameDefaultTypeInternal _Node_KeyframeAnimation_Frame_default_instance_;
class Node_Light;
class Node_LightDefaultTypeInternal;
extern Node_LightDefaultTypeInternal _Node_Light_default_instance_;
class Node_Matrix;
class Node_MatrixDefaultTypeInternal;
extern Node_MatrixDefaultTypeInternal _Node_Matrix_default_instance_;
class Node_SkeletalAnimation;
class Node_SkeletalAnimationDefaultTypeInternal;
extern Node_SkeletalAnimationDefaultTypeInternal _Node_SkeletalAnimation_default_instance_;
class Node_SkeletalAnimation_Frame;
class Node_SkeletalAnimation_FrameDefaultTypeInternal;
extern Node_SkeletalAnimation_FrameDefaultTypeInternal _Node_SkeletalAnimation_Frame_default_instance_;
class Node_Skeleton;
class Node_SkeletonDefaultTypeInternal;
extern Node_SkeletonDefaultTypeInternal _Node_Skeleton_default_instance_;
class Node_Skeleton_Bone;
class Node_Skeleton_BoneDefaultTypeInternal;
extern Node_Skeleton_BoneDefaultTypeInternal _Node_Skeleton_Bone_default_instance_;
class Node_Skeleton_BoneAttachmentPair;
class Node_Skeleton_BoneAttachmentPairDefaultTypeInternal;
extern Node_Skeleton_BoneAttachmentPairDefaultTypeInternal _Node_Skeleton_BoneAttachmentPair_default_instance_;
}  // namespace viro

namespace viro {

namespace protobuf_Nodes_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Nodes_2eproto

enum Node_Geometry_Source_Semantic {
  Node_Geometry_Source_Semantic_Vertex = 0,
  Node_Geometry_Source_Semantic_Normal = 1,
  Node_Geometry_Source_Semantic_Color = 2,
  Node_Geometry_Source_Semantic_Texcoord = 3,
  Node_Geometry_Source_Semantic_Tangent = 4,
  Node_Geometry_Source_Semantic_VertexCrease = 5,
  Node_Geometry_Source_Semantic_EdgeCrease = 6,
  Node_Geometry_Source_Semantic_BoneWeights = 7,
  Node_Geometry_Source_Semantic_BoneIndices = 8,
  Node_Geometry_Source_Semantic_Node_Geometry_Source_Semantic_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Source_Semantic_Node_Geometry_Source_Semantic_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Source_Semantic_IsValid(int value);
const Node_Geometry_Source_Semantic Node_Geometry_Source_Semantic_Semantic_MIN = Node_Geometry_Source_Semantic_Vertex;
const Node_Geometry_Source_Semantic Node_Geometry_Source_Semantic_Semantic_MAX = Node_Geometry_Source_Semantic_BoneIndices;
const int Node_Geometry_Source_Semantic_Semantic_ARRAYSIZE = Node_Geometry_Source_Semantic_Semantic_MAX + 1;

enum Node_Geometry_Element_Primitive {
  Node_Geometry_Element_Primitive_Triangle = 0,
  Node_Geometry_Element_Primitive_TriangleStrip = 1,
  Node_Geometry_Element_Primitive_Line = 2,
  Node_Geometry_Element_Primitive_Point = 3,
  Node_Geometry_Element_Primitive_Node_Geometry_Element_Primitive_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Element_Primitive_Node_Geometry_Element_Primitive_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Element_Primitive_IsValid(int value);
const Node_Geometry_Element_Primitive Node_Geometry_Element_Primitive_Primitive_MIN = Node_Geometry_Element_Primitive_Triangle;
const Node_Geometry_Element_Primitive Node_Geometry_Element_Primitive_Primitive_MAX = Node_Geometry_Element_Primitive_Point;
const int Node_Geometry_Element_Primitive_Primitive_ARRAYSIZE = Node_Geometry_Element_Primitive_Primitive_MAX + 1;

enum Node_Geometry_Material_Visual_WrapMode {
  Node_Geometry_Material_Visual_WrapMode_Clamp = 0,
  Node_Geometry_Material_Visual_WrapMode_Repeat = 1,
  Node_Geometry_Material_Visual_WrapMode_ClampToBorder = 2,
  Node_Geometry_Material_Visual_WrapMode_Mirror = 3,
  Node_Geometry_Material_Visual_WrapMode_Node_Geometry_Material_Visual_WrapMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_Visual_WrapMode_Node_Geometry_Material_Visual_WrapMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_Visual_WrapMode_IsValid(int value);
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual_WrapMode_WrapMode_MIN = Node_Geometry_Material_Visual_WrapMode_Clamp;
const Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual_WrapMode_WrapMode_MAX = Node_Geometry_Material_Visual_WrapMode_Mirror;
const int Node_Geometry_Material_Visual_WrapMode_WrapMode_ARRAYSIZE = Node_Geometry_Material_Visual_WrapMode_WrapMode_MAX + 1;

enum Node_Geometry_Material_Visual_FilterMode {
  Node_Geometry_Material_Visual_FilterMode_None = 0,
  Node_Geometry_Material_Visual_FilterMode_Nearest = 1,
  Node_Geometry_Material_Visual_FilterMode_Linear = 2,
  Node_Geometry_Material_Visual_FilterMode_Node_Geometry_Material_Visual_FilterMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_Visual_FilterMode_Node_Geometry_Material_Visual_FilterMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_Visual_FilterMode_IsValid(int value);
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual_FilterMode_FilterMode_MIN = Node_Geometry_Material_Visual_FilterMode_None;
const Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual_FilterMode_FilterMode_MAX = Node_Geometry_Material_Visual_FilterMode_Linear;
const int Node_Geometry_Material_Visual_FilterMode_FilterMode_ARRAYSIZE = Node_Geometry_Material_Visual_FilterMode_FilterMode_MAX + 1;

enum Node_Geometry_Material_LightingModel {
  Node_Geometry_Material_LightingModel_Constant = 0,
  Node_Geometry_Material_LightingModel_Lambert = 1,
  Node_Geometry_Material_LightingModel_Blinn = 2,
  Node_Geometry_Material_LightingModel_Phong = 3,
  Node_Geometry_Material_LightingModel_PhysicallyBased = 4,
  Node_Geometry_Material_LightingModel_Node_Geometry_Material_LightingModel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_LightingModel_Node_Geometry_Material_LightingModel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_LightingModel_IsValid(int value);
const Node_Geometry_Material_LightingModel Node_Geometry_Material_LightingModel_LightingModel_MIN = Node_Geometry_Material_LightingModel_Constant;
const Node_Geometry_Material_LightingModel Node_Geometry_Material_LightingModel_LightingModel_MAX = Node_Geometry_Material_LightingModel_PhysicallyBased;
const int Node_Geometry_Material_LightingModel_LightingModel_ARRAYSIZE = Node_Geometry_Material_LightingModel_LightingModel_MAX + 1;

enum Node_Geometry_Material_CullMode {
  Node_Geometry_Material_CullMode_Back = 0,
  Node_Geometry_Material_CullMode_Front = 1,
  Node_Geometry_Material_CullMode_None = 2,
  Node_Geometry_Material_CullMode_Node_Geometry_Material_CullMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_CullMode_Node_Geometry_Material_CullMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_CullMode_IsValid(int value);
const Node_Geometry_Material_CullMode Node_Geometry_Material_CullMode_CullMode_MIN = Node_Geometry_Material_CullMode_Back;
const Node_Geometry_Material_CullMode Node_Geometry_Material_CullMode_CullMode_MAX = Node_Geometry_Material_CullMode_None;
const int Node_Geometry_Material_CullMode_CullMode_ARRAYSIZE = Node_Geometry_Material_CullMode_CullMode_MAX + 1;

enum Node_Geometry_Material_BlendMode {
  Node_Geometry_Material_BlendMode_Alpha = 0,
  Node_Geometry_Material_BlendMode_Add = 1,
  Node_Geometry_Material_BlendMode_Subtract = 2,
  Node_Geometry_Material_BlendMode_Multiply = 3,
  Node_Geometry_Material_BlendMode_Screen = 4,
  Node_Geometry_Material_BlendMode_Replace = 5,
  Node_Geometry_Material_BlendMode_Node_Geometry_Material_BlendMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Geometry_Material_BlendMode_Node_Geometry_Material_BlendMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Geometry_Material_BlendMode_IsValid(int value);
const Node_Geometry_Material_BlendMode Node_Geometry_Material_BlendMode_BlendMode_MIN = Node_Geometry_Material_BlendMode_Alpha;
const Node_Geometry_Material_BlendMode Node_Geometry_Material_BlendMode_BlendMode_MAX = Node_Geometry_Material_BlendMode_Replace;
const int Node_Geometry_Material_BlendMode_BlendMode_ARRAYSIZE = Node_Geometry_Material_BlendMode_BlendMode_MAX + 1;

enum Node_Light_LightType {
  Node_Light_LightType_Ambient = 0,
  Node_Light_LightType_Directional = 1,
  Node_Light_LightType_Omni = 2,
  Node_Light_LightType_Spot = 3,
  Node_Light_LightType_Node_Light_LightType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Node_Light_LightType_Node_Light_LightType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Node_Light_LightType_IsValid(int value);
const Node_Light_LightType Node_Light_LightType_LightType_MIN = Node_Light_LightType_Ambient;
const Node_Light_LightType Node_Light_LightType_LightType_MAX = Node_Light_LightType_Spot;
const int Node_Light_LightType_LightType_ARRAYSIZE = Node_Light_LightType_LightType_MAX + 1;

// ===================================================================

class Node_Matrix : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Matrix) */ {
 public:
  Node_Matrix();
  virtual ~Node_Matrix();

  Node_Matrix(const Node_Matrix& from);

  inline Node_Matrix& operator=(const Node_Matrix& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Matrix& default_instance();

  static inline const Node_Matrix* internal_default_instance() {
    return reinterpret_cast<const Node_Matrix*>(
               &_Node_Matrix_default_instance_);
  }

  void Swap(Node_Matrix* other);

  // implements Message ----------------------------------------------

  inline Node_Matrix* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Matrix* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Matrix& from);
  void MergeFrom(const Node_Matrix& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Matrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:viro.Node.Matrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Source : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Source) */ {
 public:
  Node_Geometry_Source();
  virtual ~Node_Geometry_Source();

  Node_Geometry_Source(const Node_Geometry_Source& from);

  inline Node_Geometry_Source& operator=(const Node_Geometry_Source& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Source& default_instance();

  static inline const Node_Geometry_Source* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Source*>(
               &_Node_Geometry_Source_default_instance_);
  }

  void Swap(Node_Geometry_Source* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Source* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Source* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Source& from);
  void MergeFrom(const Node_Geometry_Source& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Source_Semantic Semantic;
  static const Semantic Vertex =
    Node_Geometry_Source_Semantic_Vertex;
  static const Semantic Normal =
    Node_Geometry_Source_Semantic_Normal;
  static const Semantic Color =
    Node_Geometry_Source_Semantic_Color;
  static const Semantic Texcoord =
    Node_Geometry_Source_Semantic_Texcoord;
  static const Semantic Tangent =
    Node_Geometry_Source_Semantic_Tangent;
  static const Semantic VertexCrease =
    Node_Geometry_Source_Semantic_VertexCrease;
  static const Semantic EdgeCrease =
    Node_Geometry_Source_Semantic_EdgeCrease;
  static const Semantic BoneWeights =
    Node_Geometry_Source_Semantic_BoneWeights;
  static const Semantic BoneIndices =
    Node_Geometry_Source_Semantic_BoneIndices;
  static inline bool Semantic_IsValid(int value) {
    return Node_Geometry_Source_Semantic_IsValid(value);
  }
  static const Semantic Semantic_MIN =
    Node_Geometry_Source_Semantic_Semantic_MIN;
  static const Semantic Semantic_MAX =
    Node_Geometry_Source_Semantic_Semantic_MAX;
  static const int Semantic_ARRAYSIZE =
    Node_Geometry_Source_Semantic_Semantic_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 8;
  void clear_data();
  static const int kDataFieldNumber = 8;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .viro.Node.Geometry.Source.Semantic semantic = 1;
  void clear_semantic();
  static const int kSemanticFieldNumber = 1;
  ::viro::Node_Geometry_Source_Semantic semantic() const;
  void set_semantic(::viro::Node_Geometry_Source_Semantic value);

  // uint32 vertex_count = 2;
  void clear_vertex_count();
  static const int kVertexCountFieldNumber = 2;
  ::google::protobuf::uint32 vertex_count() const;
  void set_vertex_count(::google::protobuf::uint32 value);

  // bool float_components = 3;
  void clear_float_components();
  static const int kFloatComponentsFieldNumber = 3;
  bool float_components() const;
  void set_float_components(bool value);

  // uint32 components_per_vertex = 4;
  void clear_components_per_vertex();
  static const int kComponentsPerVertexFieldNumber = 4;
  ::google::protobuf::uint32 components_per_vertex() const;
  void set_components_per_vertex(::google::protobuf::uint32 value);

  // uint32 bytes_per_component = 5;
  void clear_bytes_per_component();
  static const int kBytesPerComponentFieldNumber = 5;
  ::google::protobuf::uint32 bytes_per_component() const;
  void set_bytes_per_component(::google::protobuf::uint32 value);

  // uint32 data_offset = 6;
  void clear_data_offset();
  static const int kDataOffsetFieldNumber = 6;
  ::google::protobuf::uint32 data_offset() const;
  void set_data_offset(::google::protobuf::uint32 value);

  // uint32 data_stride = 7;
  void clear_data_stride();
  static const int kDataStrideFieldNumber = 7;
  ::google::protobuf::uint32 data_stride() const;
  void set_data_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Source)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int semantic_;
  ::google::protobuf::uint32 vertex_count_;
  bool float_components_;
  ::google::protobuf::uint32 components_per_vertex_;
  ::google::protobuf::uint32 bytes_per_component_;
  ::google::protobuf::uint32 data_offset_;
  ::google::protobuf::uint32 data_stride_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Element : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Element) */ {
 public:
  Node_Geometry_Element();
  virtual ~Node_Geometry_Element();

  Node_Geometry_Element(const Node_Geometry_Element& from);

  inline Node_Geometry_Element& operator=(const Node_Geometry_Element& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Element& default_instance();

  static inline const Node_Geometry_Element* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Element*>(
               &_Node_Geometry_Element_default_instance_);
  }

  void Swap(Node_Geometry_Element* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Element* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Element* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Element& from);
  void MergeFrom(const Node_Geometry_Element& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Element_Primitive Primitive;
  static const Primitive Triangle =
    Node_Geometry_Element_Primitive_Triangle;
  static const Primitive TriangleStrip =
    Node_Geometry_Element_Primitive_TriangleStrip;
  static const Primitive Line =
    Node_Geometry_Element_Primitive_Line;
  static const Primitive Point =
    Node_Geometry_Element_Primitive_Point;
  static inline bool Primitive_IsValid(int value) {
    return Node_Geometry_Element_Primitive_IsValid(value);
  }
  static const Primitive Primitive_MIN =
    Node_Geometry_Element_Primitive_Primitive_MIN;
  static const Primitive Primitive_MAX =
    Node_Geometry_Element_Primitive_Primitive_MAX;
  static const int Primitive_ARRAYSIZE =
    Node_Geometry_Element_Primitive_Primitive_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .viro.Node.Geometry.Element.Primitive primitive = 2;
  void clear_primitive();
  static const int kPrimitiveFieldNumber = 2;
  ::viro::Node_Geometry_Element_Primitive primitive() const;
  void set_primitive(::viro::Node_Geometry_Element_Primitive value);

  // uint32 primitive_count = 3;
  void clear_primitive_count();
  static const int kPrimitiveCountFieldNumber = 3;
  ::google::protobuf::uint32 primitive_count() const;
  void set_primitive_count(::google::protobuf::uint32 value);

  // uint32 bytes_per_index = 4;
  void clear_bytes_per_index();
  static const int kBytesPerIndexFieldNumber = 4;
  ::google::protobuf::uint32 bytes_per_index() const;
  void set_bytes_per_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Element)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int primitive_;
  ::google::protobuf::uint32 primitive_count_;
  ::google::protobuf::uint32 bytes_per_index_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Material_Visual : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Material.Visual) */ {
 public:
  Node_Geometry_Material_Visual();
  virtual ~Node_Geometry_Material_Visual();

  Node_Geometry_Material_Visual(const Node_Geometry_Material_Visual& from);

  inline Node_Geometry_Material_Visual& operator=(const Node_Geometry_Material_Visual& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Material_Visual& default_instance();

  static inline const Node_Geometry_Material_Visual* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Material_Visual*>(
               &_Node_Geometry_Material_Visual_default_instance_);
  }

  void Swap(Node_Geometry_Material_Visual* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Material_Visual* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Material_Visual* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Material_Visual& from);
  void MergeFrom(const Node_Geometry_Material_Visual& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Material_Visual* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Material_Visual_WrapMode WrapMode;
  static const WrapMode Clamp =
    Node_Geometry_Material_Visual_WrapMode_Clamp;
  static const WrapMode Repeat =
    Node_Geometry_Material_Visual_WrapMode_Repeat;
  static const WrapMode ClampToBorder =
    Node_Geometry_Material_Visual_WrapMode_ClampToBorder;
  static const WrapMode Mirror =
    Node_Geometry_Material_Visual_WrapMode_Mirror;
  static inline bool WrapMode_IsValid(int value) {
    return Node_Geometry_Material_Visual_WrapMode_IsValid(value);
  }
  static const WrapMode WrapMode_MIN =
    Node_Geometry_Material_Visual_WrapMode_WrapMode_MIN;
  static const WrapMode WrapMode_MAX =
    Node_Geometry_Material_Visual_WrapMode_WrapMode_MAX;
  static const int WrapMode_ARRAYSIZE =
    Node_Geometry_Material_Visual_WrapMode_WrapMode_ARRAYSIZE;

  typedef Node_Geometry_Material_Visual_FilterMode FilterMode;
  static const FilterMode None =
    Node_Geometry_Material_Visual_FilterMode_None;
  static const FilterMode Nearest =
    Node_Geometry_Material_Visual_FilterMode_Nearest;
  static const FilterMode Linear =
    Node_Geometry_Material_Visual_FilterMode_Linear;
  static inline bool FilterMode_IsValid(int value) {
    return Node_Geometry_Material_Visual_FilterMode_IsValid(value);
  }
  static const FilterMode FilterMode_MIN =
    Node_Geometry_Material_Visual_FilterMode_FilterMode_MIN;
  static const FilterMode FilterMode_MAX =
    Node_Geometry_Material_Visual_FilterMode_FilterMode_MAX;
  static const int FilterMode_ARRAYSIZE =
    Node_Geometry_Material_Visual_FilterMode_FilterMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated float color = 1;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  float color(int index) const;
  void set_color(int index, float value);
  void add_color(float value);
  const ::google::protobuf::RepeatedField< float >&
      color() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_color();

  // repeated float transform = 4;
  int transform_size() const;
  void clear_transform();
  static const int kTransformFieldNumber = 4;
  float transform(int index) const;
  void set_transform(int index, float value);
  void add_transform(float value);
  const ::google::protobuf::RepeatedField< float >&
      transform() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_transform();

  // string texture = 2;
  void clear_texture();
  static const int kTextureFieldNumber = 2;
  const ::std::string& texture() const;
  void set_texture(const ::std::string& value);
  #if LANG_CXX11
  void set_texture(::std::string&& value);
  #endif
  void set_texture(const char* value);
  void set_texture(const char* value, size_t size);
  ::std::string* mutable_texture();
  ::std::string* release_texture();
  void set_allocated_texture(::std::string* texture);

  // float intensity = 3;
  void clear_intensity();
  static const int kIntensityFieldNumber = 3;
  float intensity() const;
  void set_intensity(float value);

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
  void clear_wrap_mode_s();
  static const int kWrapModeSFieldNumber = 5;
  ::viro::Node_Geometry_Material_Visual_WrapMode wrap_mode_s() const;
  void set_wrap_mode_s(::viro::Node_Geometry_Material_Visual_WrapMode value);

  // .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
  void clear_wrap_mode_t();
  static const int kWrapModeTFieldNumber = 6;
  ::viro::Node_Geometry_Material_Visual_WrapMode wrap_mode_t() const;
  void set_wrap_mode_t(::viro::Node_Geometry_Material_Visual_WrapMode value);

  // .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
  void clear_minification_filter();
  static const int kMinificationFilterFieldNumber = 7;
  ::viro::Node_Geometry_Material_Visual_FilterMode minification_filter() const;
  void set_minification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value);

  // .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
  void clear_magnification_filter();
  static const int kMagnificationFilterFieldNumber = 8;
  ::viro::Node_Geometry_Material_Visual_FilterMode magnification_filter() const;
  void set_magnification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value);

  // .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
  void clear_mip_filter();
  static const int kMipFilterFieldNumber = 9;
  ::viro::Node_Geometry_Material_Visual_FilterMode mip_filter() const;
  void set_mip_filter(::viro::Node_Geometry_Material_Visual_FilterMode value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Material.Visual)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > color_;
  mutable int _color_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > transform_;
  mutable int _transform_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr texture_;
  float intensity_;
  int wrap_mode_s_;
  int wrap_mode_t_;
  int minification_filter_;
  int magnification_filter_;
  int mip_filter_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Material : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Material) */ {
 public:
  Node_Geometry_Material();
  virtual ~Node_Geometry_Material();

  Node_Geometry_Material(const Node_Geometry_Material& from);

  inline Node_Geometry_Material& operator=(const Node_Geometry_Material& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Material& default_instance();

  static inline const Node_Geometry_Material* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Material*>(
               &_Node_Geometry_Material_default_instance_);
  }

  void Swap(Node_Geometry_Material* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Material* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Material* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Material& from);
  void MergeFrom(const Node_Geometry_Material& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Material* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Material_Visual Visual;

  typedef Node_Geometry_Material_LightingModel LightingModel;
  static const LightingModel Constant =
    Node_Geometry_Material_LightingModel_Constant;
  static const LightingModel Lambert =
    Node_Geometry_Material_LightingModel_Lambert;
  static const LightingModel Blinn =
    Node_Geometry_Material_LightingModel_Blinn;
  static const LightingModel Phong =
    Node_Geometry_Material_LightingModel_Phong;
  static const LightingModel PhysicallyBased =
    Node_Geometry_Material_LightingModel_PhysicallyBased;
  static inline bool LightingModel_IsValid(int value) {
    return Node_Geometry_Material_LightingModel_IsValid(value);
  }
  static const LightingModel LightingModel_MIN =
    Node_Geometry_Material_LightingModel_LightingModel_MIN;
  static const LightingModel LightingModel_MAX =
    Node_Geometry_Material_LightingModel_LightingModel_MAX;
  static const int LightingModel_ARRAYSIZE =
    Node_Geometry_Material_LightingModel_LightingModel_ARRAYSIZE;

  typedef Node_Geometry_Material_CullMode CullMode;
  static const CullMode Back =
    Node_Geometry_Material_CullMode_Back;
  static const CullMode Front =
    Node_Geometry_Material_CullMode_Front;
  static const CullMode None =
    Node_Geometry_Material_CullMode_None;
  static inline bool CullMode_IsValid(int value) {
    return Node_Geometry_Material_CullMode_IsValid(value);
  }
  static const CullMode CullMode_MIN =
    Node_Geometry_Material_CullMode_CullMode_MIN;
  static const CullMode CullMode_MAX =
    Node_Geometry_Material_CullMode_CullMode_MAX;
  static const int CullMode_ARRAYSIZE =
    Node_Geometry_Material_CullMode_CullMode_ARRAYSIZE;

  typedef Node_Geometry_Material_BlendMode BlendMode;
  static const BlendMode Alpha =
    Node_Geometry_Material_BlendMode_Alpha;
  static const BlendMode Add =
    Node_Geometry_Material_BlendMode_Add;
  static const BlendMode Subtract =
    Node_Geometry_Material_BlendMode_Subtract;
  static const BlendMode Multiply =
    Node_Geometry_Material_BlendMode_Multiply;
  static const BlendMode Screen =
    Node_Geometry_Material_BlendMode_Screen;
  static const BlendMode Replace =
    Node_Geometry_Material_BlendMode_Replace;
  static inline bool BlendMode_IsValid(int value) {
    return Node_Geometry_Material_BlendMode_IsValid(value);
  }
  static const BlendMode BlendMode_MIN =
    Node_Geometry_Material_BlendMode_BlendMode_MIN;
  static const BlendMode BlendMode_MAX =
    Node_Geometry_Material_BlendMode_BlendMode_MAX;
  static const int BlendMode_ARRAYSIZE =
    Node_Geometry_Material_BlendMode_BlendMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .viro.Node.Geometry.Material.Visual diffuse = 11;
  bool has_diffuse() const;
  void clear_diffuse();
  static const int kDiffuseFieldNumber = 11;
  const ::viro::Node_Geometry_Material_Visual& diffuse() const;
  ::viro::Node_Geometry_Material_Visual* mutable_diffuse();
  ::viro::Node_Geometry_Material_Visual* release_diffuse();
  void set_allocated_diffuse(::viro::Node_Geometry_Material_Visual* diffuse);

  // .viro.Node.Geometry.Material.Visual specular = 12;
  bool has_specular() const;
  void clear_specular();
  static const int kSpecularFieldNumber = 12;
  const ::viro::Node_Geometry_Material_Visual& specular() const;
  ::viro::Node_Geometry_Material_Visual* mutable_specular();
  ::viro::Node_Geometry_Material_Visual* release_specular();
  void set_allocated_specular(::viro::Node_Geometry_Material_Visual* specular);

  // .viro.Node.Geometry.Material.Visual normal = 13;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 13;
  const ::viro::Node_Geometry_Material_Visual& normal() const;
  ::viro::Node_Geometry_Material_Visual* mutable_normal();
  ::viro::Node_Geometry_Material_Visual* release_normal();
  void set_allocated_normal(::viro::Node_Geometry_Material_Visual* normal);

  // .viro.Node.Geometry.Material.Visual reflective = 14;
  bool has_reflective() const;
  void clear_reflective();
  static const int kReflectiveFieldNumber = 14;
  const ::viro::Node_Geometry_Material_Visual& reflective() const;
  ::viro::Node_Geometry_Material_Visual* mutable_reflective();
  ::viro::Node_Geometry_Material_Visual* release_reflective();
  void set_allocated_reflective(::viro::Node_Geometry_Material_Visual* reflective);

  // .viro.Node.Geometry.Material.Visual emission = 15;
  bool has_emission() const;
  void clear_emission();
  static const int kEmissionFieldNumber = 15;
  const ::viro::Node_Geometry_Material_Visual& emission() const;
  ::viro::Node_Geometry_Material_Visual* mutable_emission();
  ::viro::Node_Geometry_Material_Visual* release_emission();
  void set_allocated_emission(::viro::Node_Geometry_Material_Visual* emission);

  // .viro.Node.Geometry.Material.Visual multiply = 16;
  bool has_multiply() const;
  void clear_multiply();
  static const int kMultiplyFieldNumber = 16;
  const ::viro::Node_Geometry_Material_Visual& multiply() const;
  ::viro::Node_Geometry_Material_Visual* mutable_multiply();
  ::viro::Node_Geometry_Material_Visual* release_multiply();
  void set_allocated_multiply(::viro::Node_Geometry_Material_Visual* multiply);

  // .viro.Node.Geometry.Material.Visual roughness = 17;
  bool has_roughness() const;
  void clear_roughness();
  static const int kRoughnessFieldNumber = 17;
  const ::viro::Node_Geometry_Material_Visual& roughness() const;
  ::viro::Node_Geometry_Material_Visual* mutable_roughness();
  ::viro::Node_Geometry_Material_Visual* release_roughness();
  void set_allocated_roughness(::viro::Node_Geometry_Material_Visual* roughness);

  // .viro.Node.Geometry.Material.Visual metalness = 18;
  bool has_metalness() const;
  void clear_metalness();
  static const int kMetalnessFieldNumber = 18;
  const ::viro::Node_Geometry_Material_Visual& metalness() const;
  ::viro::Node_Geometry_Material_Visual* mutable_metalness();
  ::viro::Node_Geometry_Material_Visual* release_metalness();
  void set_allocated_metalness(::viro::Node_Geometry_Material_Visual* metalness);

  // .viro.Node.Geometry.Material.Visual ao = 19;
  bool has_ao() const;
  void clear_ao();
  static const int kAoFieldNumber = 19;
  const ::viro::Node_Geometry_Material_Visual& ao() const;
  ::viro::Node_Geometry_Material_Visual* mutable_ao();
  ::viro::Node_Geometry_Material_Visual* release_ao();
  void set_allocated_ao(::viro::Node_Geometry_Material_Visual* ao);

  // float shininess = 2;
  void clear_shininess();
  static const int kShininessFieldNumber = 2;
  float shininess() const;
  void set_shininess(float value);

  // float fresnel_exponent = 3;
  void clear_fresnel_exponent();
  static const int kFresnelExponentFieldNumber = 3;
  float fresnel_exponent() const;
  void set_fresnel_exponent(float value);

  // float transparency = 4;
  void clear_transparency();
  static const int kTransparencyFieldNumber = 4;
  float transparency() const;
  void set_transparency(float value);

  // .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
  void clear_lighting_model();
  static const int kLightingModelFieldNumber = 5;
  ::viro::Node_Geometry_Material_LightingModel lighting_model() const;
  void set_lighting_model(::viro::Node_Geometry_Material_LightingModel value);

  // .viro.Node.Geometry.Material.CullMode cull_mode = 7;
  void clear_cull_mode();
  static const int kCullModeFieldNumber = 7;
  ::viro::Node_Geometry_Material_CullMode cull_mode() const;
  void set_cull_mode(::viro::Node_Geometry_Material_CullMode value);

  // .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
  void clear_blend_mode();
  static const int kBlendModeFieldNumber = 8;
  ::viro::Node_Geometry_Material_BlendMode blend_mode() const;
  void set_blend_mode(::viro::Node_Geometry_Material_BlendMode value);

  // bool lit_per_pixel = 6;
  void clear_lit_per_pixel();
  static const int kLitPerPixelFieldNumber = 6;
  bool lit_per_pixel() const;
  void set_lit_per_pixel(bool value);

  // bool reads_from_depth_buffer = 9;
  void clear_reads_from_depth_buffer();
  static const int kReadsFromDepthBufferFieldNumber = 9;
  bool reads_from_depth_buffer() const;
  void set_reads_from_depth_buffer(bool value);

  // bool writes_to_depth_buffer = 10;
  void clear_writes_to_depth_buffer();
  static const int kWritesToDepthBufferFieldNumber = 10;
  bool writes_to_depth_buffer() const;
  void set_writes_to_depth_buffer(bool value);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Material)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::viro::Node_Geometry_Material_Visual* diffuse_;
  ::viro::Node_Geometry_Material_Visual* specular_;
  ::viro::Node_Geometry_Material_Visual* normal_;
  ::viro::Node_Geometry_Material_Visual* reflective_;
  ::viro::Node_Geometry_Material_Visual* emission_;
  ::viro::Node_Geometry_Material_Visual* multiply_;
  ::viro::Node_Geometry_Material_Visual* roughness_;
  ::viro::Node_Geometry_Material_Visual* metalness_;
  ::viro::Node_Geometry_Material_Visual* ao_;
  float shininess_;
  float fresnel_exponent_;
  float transparency_;
  int lighting_model_;
  int cull_mode_;
  int blend_mode_;
  bool lit_per_pixel_;
  bool reads_from_depth_buffer_;
  bool writes_to_depth_buffer_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry_Skin : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry.Skin) */ {
 public:
  Node_Geometry_Skin();
  virtual ~Node_Geometry_Skin();

  Node_Geometry_Skin(const Node_Geometry_Skin& from);

  inline Node_Geometry_Skin& operator=(const Node_Geometry_Skin& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry_Skin& default_instance();

  static inline const Node_Geometry_Skin* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry_Skin*>(
               &_Node_Geometry_Skin_default_instance_);
  }

  void Swap(Node_Geometry_Skin* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry_Skin* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry_Skin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry_Skin& from);
  void MergeFrom(const Node_Geometry_Skin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry_Skin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .viro.Node.Matrix bind_transform = 2;
  int bind_transform_size() const;
  void clear_bind_transform();
  static const int kBindTransformFieldNumber = 2;
  const ::viro::Node_Matrix& bind_transform(int index) const;
  ::viro::Node_Matrix* mutable_bind_transform(int index);
  ::viro::Node_Matrix* add_bind_transform();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >*
      mutable_bind_transform();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >&
      bind_transform() const;

  // .viro.Node.Matrix geometry_bind_transform = 1;
  bool has_geometry_bind_transform() const;
  void clear_geometry_bind_transform();
  static const int kGeometryBindTransformFieldNumber = 1;
  const ::viro::Node_Matrix& geometry_bind_transform() const;
  ::viro::Node_Matrix* mutable_geometry_bind_transform();
  ::viro::Node_Matrix* release_geometry_bind_transform();
  void set_allocated_geometry_bind_transform(::viro::Node_Matrix* geometry_bind_transform);

  // .viro.Node.Geometry.Source bone_indices = 3;
  bool has_bone_indices() const;
  void clear_bone_indices();
  static const int kBoneIndicesFieldNumber = 3;
  const ::viro::Node_Geometry_Source& bone_indices() const;
  ::viro::Node_Geometry_Source* mutable_bone_indices();
  ::viro::Node_Geometry_Source* release_bone_indices();
  void set_allocated_bone_indices(::viro::Node_Geometry_Source* bone_indices);

  // .viro.Node.Geometry.Source bone_weights = 4;
  bool has_bone_weights() const;
  void clear_bone_weights();
  static const int kBoneWeightsFieldNumber = 4;
  const ::viro::Node_Geometry_Source& bone_weights() const;
  ::viro::Node_Geometry_Source* mutable_bone_weights();
  ::viro::Node_Geometry_Source* release_bone_weights();
  void set_allocated_bone_weights(::viro::Node_Geometry_Source* bone_weights);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry.Skin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix > bind_transform_;
  ::viro::Node_Matrix* geometry_bind_transform_;
  ::viro::Node_Geometry_Source* bone_indices_;
  ::viro::Node_Geometry_Source* bone_weights_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Geometry : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Geometry) */ {
 public:
  Node_Geometry();
  virtual ~Node_Geometry();

  Node_Geometry(const Node_Geometry& from);

  inline Node_Geometry& operator=(const Node_Geometry& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Geometry& default_instance();

  static inline const Node_Geometry* internal_default_instance() {
    return reinterpret_cast<const Node_Geometry*>(
               &_Node_Geometry_default_instance_);
  }

  void Swap(Node_Geometry* other);

  // implements Message ----------------------------------------------

  inline Node_Geometry* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Geometry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Geometry& from);
  void MergeFrom(const Node_Geometry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Geometry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Geometry_Source Source;
  typedef Node_Geometry_Element Element;
  typedef Node_Geometry_Material Material;
  typedef Node_Geometry_Skin Skin;

  // accessors -------------------------------------------------------

  // repeated .viro.Node.Geometry.Source source = 3;
  int source_size() const;
  void clear_source();
  static const int kSourceFieldNumber = 3;
  const ::viro::Node_Geometry_Source& source(int index) const;
  ::viro::Node_Geometry_Source* mutable_source(int index);
  ::viro::Node_Geometry_Source* add_source();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >*
      mutable_source();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >&
      source() const;

  // repeated .viro.Node.Geometry.Element element = 4;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 4;
  const ::viro::Node_Geometry_Element& element(int index) const;
  ::viro::Node_Geometry_Element* mutable_element(int index);
  ::viro::Node_Geometry_Element* add_element();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >&
      element() const;

  // repeated .viro.Node.Geometry.Material material = 5;
  int material_size() const;
  void clear_material();
  static const int kMaterialFieldNumber = 5;
  const ::viro::Node_Geometry_Material& material(int index) const;
  ::viro::Node_Geometry_Material* mutable_material(int index);
  ::viro::Node_Geometry_Material* add_material();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >*
      mutable_material();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >&
      material() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .viro.Node.Geometry.Skin skin = 6;
  bool has_skin() const;
  void clear_skin();
  static const int kSkinFieldNumber = 6;
  const ::viro::Node_Geometry_Skin& skin() const;
  ::viro::Node_Geometry_Skin* mutable_skin();
  ::viro::Node_Geometry_Skin* release_skin();
  void set_allocated_skin(::viro::Node_Geometry_Skin* skin);

  // @@protoc_insertion_point(class_scope:viro.Node.Geometry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source > source_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element > element_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material > material_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::viro::Node_Geometry_Skin* skin_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Skeleton_Bone : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Skeleton.Bone) */ {
 public:
  Node_Skeleton_Bone();
  virtual ~Node_Skeleton_Bone();

  Node_Skeleton_Bone(const Node_Skeleton_Bone& from);

  inline Node_Skeleton_Bone& operator=(const Node_Skeleton_Bone& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Skeleton_Bone& default_instance();

  static inline const Node_Skeleton_Bone* internal_default_instance() {
    return reinterpret_cast<const Node_Skeleton_Bone*>(
               &_Node_Skeleton_Bone_default_instance_);
  }

  void Swap(Node_Skeleton_Bone* other);

  // implements Message ----------------------------------------------

  inline Node_Skeleton_Bone* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Skeleton_Bone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Skeleton_Bone& from);
  void MergeFrom(const Node_Skeleton_Bone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Skeleton_Bone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .viro.Node.Skeleton.BoneAttachmentPair attachment_transforms = 5;
  int attachment_transforms_size() const;
  void clear_attachment_transforms();
  static const int kAttachmentTransformsFieldNumber = 5;
  const ::viro::Node_Skeleton_BoneAttachmentPair& attachment_transforms(int index) const;
  ::viro::Node_Skeleton_BoneAttachmentPair* mutable_attachment_transforms(int index);
  ::viro::Node_Skeleton_BoneAttachmentPair* add_attachment_transforms();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_BoneAttachmentPair >*
      mutable_attachment_transforms();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_BoneAttachmentPair >&
      attachment_transforms() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .viro.Node.Matrix local_transform = 3;
  bool has_local_transform() const;
  void clear_local_transform();
  static const int kLocalTransformFieldNumber = 3;
  const ::viro::Node_Matrix& local_transform() const;
  ::viro::Node_Matrix* mutable_local_transform();
  ::viro::Node_Matrix* release_local_transform();
  void set_allocated_local_transform(::viro::Node_Matrix* local_transform);

  // .viro.Node.Matrix bind_transform = 4;
  bool has_bind_transform() const;
  void clear_bind_transform();
  static const int kBindTransformFieldNumber = 4;
  const ::viro::Node_Matrix& bind_transform() const;
  ::viro::Node_Matrix* mutable_bind_transform();
  ::viro::Node_Matrix* release_bind_transform();
  void set_allocated_bind_transform(::viro::Node_Matrix* bind_transform);

  // int32 parent_index = 2;
  void clear_parent_index();
  static const int kParentIndexFieldNumber = 2;
  ::google::protobuf::int32 parent_index() const;
  void set_parent_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:viro.Node.Skeleton.Bone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_BoneAttachmentPair > attachment_transforms_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::viro::Node_Matrix* local_transform_;
  ::viro::Node_Matrix* bind_transform_;
  ::google::protobuf::int32 parent_index_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Skeleton_BoneAttachmentPair : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Skeleton.BoneAttachmentPair) */ {
 public:
  Node_Skeleton_BoneAttachmentPair();
  virtual ~Node_Skeleton_BoneAttachmentPair();

  Node_Skeleton_BoneAttachmentPair(const Node_Skeleton_BoneAttachmentPair& from);

  inline Node_Skeleton_BoneAttachmentPair& operator=(const Node_Skeleton_BoneAttachmentPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Skeleton_BoneAttachmentPair& default_instance();

  static inline const Node_Skeleton_BoneAttachmentPair* internal_default_instance() {
    return reinterpret_cast<const Node_Skeleton_BoneAttachmentPair*>(
               &_Node_Skeleton_BoneAttachmentPair_default_instance_);
  }

  void Swap(Node_Skeleton_BoneAttachmentPair* other);

  // implements Message ----------------------------------------------

  inline Node_Skeleton_BoneAttachmentPair* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Skeleton_BoneAttachmentPair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Skeleton_BoneAttachmentPair& from);
  void MergeFrom(const Node_Skeleton_BoneAttachmentPair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Skeleton_BoneAttachmentPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .viro.Node.Matrix value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::viro::Node_Matrix& value() const;
  ::viro::Node_Matrix* mutable_value();
  ::viro::Node_Matrix* release_value();
  void set_allocated_value(::viro::Node_Matrix* value);

  // @@protoc_insertion_point(class_scope:viro.Node.Skeleton.BoneAttachmentPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::viro::Node_Matrix* value_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Skeleton : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Skeleton) */ {
 public:
  Node_Skeleton();
  virtual ~Node_Skeleton();

  Node_Skeleton(const Node_Skeleton& from);

  inline Node_Skeleton& operator=(const Node_Skeleton& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Skeleton& default_instance();

  static inline const Node_Skeleton* internal_default_instance() {
    return reinterpret_cast<const Node_Skeleton*>(
               &_Node_Skeleton_default_instance_);
  }

  void Swap(Node_Skeleton* other);

  // implements Message ----------------------------------------------

  inline Node_Skeleton* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Skeleton* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Skeleton& from);
  void MergeFrom(const Node_Skeleton& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Skeleton* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Skeleton_Bone Bone;
  typedef Node_Skeleton_BoneAttachmentPair BoneAttachmentPair;

  // accessors -------------------------------------------------------

  // repeated .viro.Node.Skeleton.Bone bone = 1;
  int bone_size() const;
  void clear_bone();
  static const int kBoneFieldNumber = 1;
  const ::viro::Node_Skeleton_Bone& bone(int index) const;
  ::viro::Node_Skeleton_Bone* mutable_bone(int index);
  ::viro::Node_Skeleton_Bone* add_bone();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_Bone >*
      mutable_bone();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_Bone >&
      bone() const;

  // @@protoc_insertion_point(class_scope:viro.Node.Skeleton)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_Bone > bone_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_SkeletalAnimation_Frame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.SkeletalAnimation.Frame) */ {
 public:
  Node_SkeletalAnimation_Frame();
  virtual ~Node_SkeletalAnimation_Frame();

  Node_SkeletalAnimation_Frame(const Node_SkeletalAnimation_Frame& from);

  inline Node_SkeletalAnimation_Frame& operator=(const Node_SkeletalAnimation_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_SkeletalAnimation_Frame& default_instance();

  static inline const Node_SkeletalAnimation_Frame* internal_default_instance() {
    return reinterpret_cast<const Node_SkeletalAnimation_Frame*>(
               &_Node_SkeletalAnimation_Frame_default_instance_);
  }

  void Swap(Node_SkeletalAnimation_Frame* other);

  // implements Message ----------------------------------------------

  inline Node_SkeletalAnimation_Frame* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_SkeletalAnimation_Frame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_SkeletalAnimation_Frame& from);
  void MergeFrom(const Node_SkeletalAnimation_Frame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_SkeletalAnimation_Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bone_index = 2;
  int bone_index_size() const;
  void clear_bone_index();
  static const int kBoneIndexFieldNumber = 2;
  ::google::protobuf::int32 bone_index(int index) const;
  void set_bone_index(int index, ::google::protobuf::int32 value);
  void add_bone_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bone_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bone_index();

  // repeated .viro.Node.Matrix transform = 3;
  int transform_size() const;
  void clear_transform();
  static const int kTransformFieldNumber = 3;
  const ::viro::Node_Matrix& transform(int index) const;
  ::viro::Node_Matrix* mutable_transform(int index);
  ::viro::Node_Matrix* add_transform();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >*
      mutable_transform();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >&
      transform() const;

  // repeated .viro.Node.Matrix local_transform = 4;
  int local_transform_size() const;
  void clear_local_transform();
  static const int kLocalTransformFieldNumber = 4;
  const ::viro::Node_Matrix& local_transform(int index) const;
  ::viro::Node_Matrix* mutable_local_transform(int index);
  ::viro::Node_Matrix* add_local_transform();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >*
      mutable_local_transform();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >&
      local_transform() const;

  // float time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:viro.Node.SkeletalAnimation.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bone_index_;
  mutable int _bone_index_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix > transform_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix > local_transform_;
  float time_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_SkeletalAnimation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.SkeletalAnimation) */ {
 public:
  Node_SkeletalAnimation();
  virtual ~Node_SkeletalAnimation();

  Node_SkeletalAnimation(const Node_SkeletalAnimation& from);

  inline Node_SkeletalAnimation& operator=(const Node_SkeletalAnimation& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_SkeletalAnimation& default_instance();

  static inline const Node_SkeletalAnimation* internal_default_instance() {
    return reinterpret_cast<const Node_SkeletalAnimation*>(
               &_Node_SkeletalAnimation_default_instance_);
  }

  void Swap(Node_SkeletalAnimation* other);

  // implements Message ----------------------------------------------

  inline Node_SkeletalAnimation* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_SkeletalAnimation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_SkeletalAnimation& from);
  void MergeFrom(const Node_SkeletalAnimation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_SkeletalAnimation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_SkeletalAnimation_Frame Frame;

  // accessors -------------------------------------------------------

  // repeated .viro.Node.SkeletalAnimation.Frame frame = 2;
  int frame_size() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  const ::viro::Node_SkeletalAnimation_Frame& frame(int index) const;
  ::viro::Node_SkeletalAnimation_Frame* mutable_frame(int index);
  ::viro::Node_SkeletalAnimation_Frame* add_frame();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation_Frame >*
      mutable_frame();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation_Frame >&
      frame() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // bool has_scaling = 4;
  void clear_has_scaling();
  static const int kHasScalingFieldNumber = 4;
  bool has_scaling() const;
  void set_has_scaling(bool value);

  // @@protoc_insertion_point(class_scope:viro.Node.SkeletalAnimation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation_Frame > frame_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 duration_;
  bool has_scaling_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_KeyframeAnimation_Frame : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.KeyframeAnimation.Frame) */ {
 public:
  Node_KeyframeAnimation_Frame();
  virtual ~Node_KeyframeAnimation_Frame();

  Node_KeyframeAnimation_Frame(const Node_KeyframeAnimation_Frame& from);

  inline Node_KeyframeAnimation_Frame& operator=(const Node_KeyframeAnimation_Frame& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_KeyframeAnimation_Frame& default_instance();

  static inline const Node_KeyframeAnimation_Frame* internal_default_instance() {
    return reinterpret_cast<const Node_KeyframeAnimation_Frame*>(
               &_Node_KeyframeAnimation_Frame_default_instance_);
  }

  void Swap(Node_KeyframeAnimation_Frame* other);

  // implements Message ----------------------------------------------

  inline Node_KeyframeAnimation_Frame* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_KeyframeAnimation_Frame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_KeyframeAnimation_Frame& from);
  void MergeFrom(const Node_KeyframeAnimation_Frame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_KeyframeAnimation_Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float translation = 2;
  int translation_size() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 2;
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::google::protobuf::RepeatedField< float >&
      translation() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_translation();

  // repeated float rotation = 3;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::google::protobuf::RepeatedField< float >&
      rotation() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rotation();

  // repeated float scale = 4;
  int scale_size() const;
  void clear_scale();
  static const int kScaleFieldNumber = 4;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::google::protobuf::RepeatedField< float >&
      scale() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scale();

  // float time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:viro.Node.KeyframeAnimation.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > translation_;
  mutable int _translation_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rotation_;
  mutable int _rotation_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > scale_;
  mutable int _scale_cached_byte_size_;
  float time_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_KeyframeAnimation : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.KeyframeAnimation) */ {
 public:
  Node_KeyframeAnimation();
  virtual ~Node_KeyframeAnimation();

  Node_KeyframeAnimation(const Node_KeyframeAnimation& from);

  inline Node_KeyframeAnimation& operator=(const Node_KeyframeAnimation& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_KeyframeAnimation& default_instance();

  static inline const Node_KeyframeAnimation* internal_default_instance() {
    return reinterpret_cast<const Node_KeyframeAnimation*>(
               &_Node_KeyframeAnimation_default_instance_);
  }

  void Swap(Node_KeyframeAnimation* other);

  // implements Message ----------------------------------------------

  inline Node_KeyframeAnimation* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_KeyframeAnimation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_KeyframeAnimation& from);
  void MergeFrom(const Node_KeyframeAnimation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_KeyframeAnimation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_KeyframeAnimation_Frame Frame;

  // accessors -------------------------------------------------------

  // repeated .viro.Node.KeyframeAnimation.Frame frame = 2;
  int frame_size() const;
  void clear_frame();
  static const int kFrameFieldNumber = 2;
  const ::viro::Node_KeyframeAnimation_Frame& frame(int index) const;
  ::viro::Node_KeyframeAnimation_Frame* mutable_frame(int index);
  ::viro::Node_KeyframeAnimation_Frame* add_frame();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation_Frame >*
      mutable_frame();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation_Frame >&
      frame() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::int64 duration() const;
  void set_duration(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:viro.Node.KeyframeAnimation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation_Frame > frame_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 duration_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Light : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Light) */ {
 public:
  Node_Light();
  virtual ~Node_Light();

  Node_Light(const Node_Light& from);

  inline Node_Light& operator=(const Node_Light& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Light& default_instance();

  static inline const Node_Light* internal_default_instance() {
    return reinterpret_cast<const Node_Light*>(
               &_Node_Light_default_instance_);
  }

  void Swap(Node_Light* other);

  // implements Message ----------------------------------------------

  inline Node_Light* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Light* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Light& from);
  void MergeFrom(const Node_Light& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Light* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Light_LightType LightType;
  static const LightType Ambient =
    Node_Light_LightType_Ambient;
  static const LightType Directional =
    Node_Light_LightType_Directional;
  static const LightType Omni =
    Node_Light_LightType_Omni;
  static const LightType Spot =
    Node_Light_LightType_Spot;
  static inline bool LightType_IsValid(int value) {
    return Node_Light_LightType_IsValid(value);
  }
  static const LightType LightType_MIN =
    Node_Light_LightType_LightType_MIN;
  static const LightType LightType_MAX =
    Node_Light_LightType_LightType_MAX;
  static const int LightType_ARRAYSIZE =
    Node_Light_LightType_LightType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated float color = 3;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  float color(int index) const;
  void set_color(int index, float value);
  void add_color(float value);
  const ::google::protobuf::RepeatedField< float >&
      color() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_color();

  // repeated float position = 4;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // repeated float direction = 5;
  int direction_size() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  float direction(int index) const;
  void set_direction(int index, float value);
  void add_direction(float value);
  const ::google::protobuf::RepeatedField< float >&
      direction() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_direction();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .viro.Node.Light.LightType light_type = 2;
  void clear_light_type();
  static const int kLightTypeFieldNumber = 2;
  ::viro::Node_Light_LightType light_type() const;
  void set_light_type(::viro::Node_Light_LightType value);

  // float intensity = 6;
  void clear_intensity();
  static const int kIntensityFieldNumber = 6;
  float intensity() const;
  void set_intensity(float value);

  // float temperature = 7;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 7;
  float temperature() const;
  void set_temperature(float value);

  // float attenuation_start = 8;
  void clear_attenuation_start();
  static const int kAttenuationStartFieldNumber = 8;
  float attenuation_start() const;
  void set_attenuation_start(float value);

  // float attenuation_end = 9;
  void clear_attenuation_end();
  static const int kAttenuationEndFieldNumber = 9;
  float attenuation_end() const;
  void set_attenuation_end(float value);

  // float attenuation_falloff_exponent = 10;
  void clear_attenuation_falloff_exponent();
  static const int kAttenuationFalloffExponentFieldNumber = 10;
  float attenuation_falloff_exponent() const;
  void set_attenuation_falloff_exponent(float value);

  // float spot_inner_angle = 11;
  void clear_spot_inner_angle();
  static const int kSpotInnerAngleFieldNumber = 11;
  float spot_inner_angle() const;
  void set_spot_inner_angle(float value);

  // float spot_outer_angle = 12;
  void clear_spot_outer_angle();
  static const int kSpotOuterAngleFieldNumber = 12;
  float spot_outer_angle() const;
  void set_spot_outer_angle(float value);

  // @@protoc_insertion_point(class_scope:viro.Node.Light)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > color_;
  mutable int _color_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > direction_;
  mutable int _direction_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int light_type_;
  float intensity_;
  float temperature_;
  float attenuation_start_;
  float attenuation_end_;
  float attenuation_falloff_exponent_;
  float spot_inner_angle_;
  float spot_outer_angle_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node_Camera : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node.Camera) */ {
 public:
  Node_Camera();
  virtual ~Node_Camera();

  Node_Camera(const Node_Camera& from);

  inline Node_Camera& operator=(const Node_Camera& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node_Camera& default_instance();

  static inline const Node_Camera* internal_default_instance() {
    return reinterpret_cast<const Node_Camera*>(
               &_Node_Camera_default_instance_);
  }

  void Swap(Node_Camera* other);

  // implements Message ----------------------------------------------

  inline Node_Camera* New() const PROTOBUF_FINAL { return New(NULL); }

  Node_Camera* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node_Camera& from);
  void MergeFrom(const Node_Camera& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float position = 1;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // @@protoc_insertion_point(class_scope:viro.Node.Camera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:viro.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Node_Matrix Matrix;
  typedef Node_Geometry Geometry;
  typedef Node_Skeleton Skeleton;
  typedef Node_SkeletalAnimation SkeletalAnimation;
  typedef Node_KeyframeAnimation KeyframeAnimation;
  typedef Node_Light Light;
  typedef Node_Camera Camera;

  // accessors -------------------------------------------------------

  // repeated float position = 2;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // repeated float scale = 3;
  int scale_size() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  float scale(int index) const;
  void set_scale(int index, float value);
  void add_scale(float value);
  const ::google::protobuf::RepeatedField< float >&
      scale() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scale();

  // repeated float rotation = 4;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::google::protobuf::RepeatedField< float >&
      rotation() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rotation();

  // repeated .viro.Node.SkeletalAnimation skeletal_animation = 9;
  int skeletal_animation_size() const;
  void clear_skeletal_animation();
  static const int kSkeletalAnimationFieldNumber = 9;
  const ::viro::Node_SkeletalAnimation& skeletal_animation(int index) const;
  ::viro::Node_SkeletalAnimation* mutable_skeletal_animation(int index);
  ::viro::Node_SkeletalAnimation* add_skeletal_animation();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation >*
      mutable_skeletal_animation();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation >&
      skeletal_animation() const;

  // repeated .viro.Node.KeyframeAnimation keyframe_animation = 10;
  int keyframe_animation_size() const;
  void clear_keyframe_animation();
  static const int kKeyframeAnimationFieldNumber = 10;
  const ::viro::Node_KeyframeAnimation& keyframe_animation(int index) const;
  ::viro::Node_KeyframeAnimation* mutable_keyframe_animation(int index);
  ::viro::Node_KeyframeAnimation* add_keyframe_animation();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation >*
      mutable_keyframe_animation();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation >&
      keyframe_animation() const;

  // repeated .viro.Node.Light light = 11;
  int light_size() const;
  void clear_light();
  static const int kLightFieldNumber = 11;
  const ::viro::Node_Light& light(int index) const;
  ::viro::Node_Light* mutable_light(int index);
  ::viro::Node_Light* add_light();
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >*
      mutable_light();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >&
      light() const;

  // repeated .viro.Node subnode = 13;
  int subnode_size() const;
  void clear_subnode();
  static const int kSubnodeFieldNumber = 13;
  const ::viro::Node& subnode(int index) const;
  ::viro::Node* mutable_subnode(int index);
  ::viro::Node* add_subnode();
  ::google::protobuf::RepeatedPtrField< ::viro::Node >*
      mutable_subnode();
  const ::google::protobuf::RepeatedPtrField< ::viro::Node >&
      subnode() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .viro.Node.Geometry geometry = 7;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 7;
  const ::viro::Node_Geometry& geometry() const;
  ::viro::Node_Geometry* mutable_geometry();
  ::viro::Node_Geometry* release_geometry();
  void set_allocated_geometry(::viro::Node_Geometry* geometry);

  // .viro.Node.Skeleton skeleton = 8;
  bool has_skeleton() const;
  void clear_skeleton();
  static const int kSkeletonFieldNumber = 8;
  const ::viro::Node_Skeleton& skeleton() const;
  ::viro::Node_Skeleton* mutable_skeleton();
  ::viro::Node_Skeleton* release_skeleton();
  void set_allocated_skeleton(::viro::Node_Skeleton* skeleton);

  // .viro.Node.Camera camera = 12;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 12;
  const ::viro::Node_Camera& camera() const;
  ::viro::Node_Camera* mutable_camera();
  ::viro::Node_Camera* release_camera();
  void set_allocated_camera(::viro::Node_Camera* camera);

  // int32 rendering_order = 5;
  void clear_rendering_order();
  static const int kRenderingOrderFieldNumber = 5;
  ::google::protobuf::int32 rendering_order() const;
  void set_rendering_order(::google::protobuf::int32 value);

  // float opacity = 6;
  void clear_opacity();
  static const int kOpacityFieldNumber = 6;
  float opacity() const;
  void set_opacity(float value);

  // @@protoc_insertion_point(class_scope:viro.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > scale_;
  mutable int _scale_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rotation_;
  mutable int _rotation_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation > skeletal_animation_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation > keyframe_animation_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node_Light > light_;
  ::google::protobuf::RepeatedPtrField< ::viro::Node > subnode_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::viro::Node_Geometry* geometry_;
  ::viro::Node_Skeleton* skeleton_;
  ::viro::Node_Camera* camera_;
  ::google::protobuf::int32 rendering_order_;
  float opacity_;
  mutable int _cached_size_;
  friend struct  protobuf_Nodes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Matrix

// repeated float value = 1;
inline int Node_Matrix::value_size() const {
  return value_.size();
}
inline void Node_Matrix::clear_value() {
  value_.Clear();
}
inline float Node_Matrix::value(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Matrix.value)
  return value_.Get(index);
}
inline void Node_Matrix::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Matrix.value)
}
inline void Node_Matrix::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Matrix.value)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Matrix::value() const {
  // @@protoc_insertion_point(field_list:viro.Node.Matrix.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Matrix::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Matrix.value)
  return &value_;
}

// -------------------------------------------------------------------

// Node_Geometry_Source

// .viro.Node.Geometry.Source.Semantic semantic = 1;
inline void Node_Geometry_Source::clear_semantic() {
  semantic_ = 0;
}
inline ::viro::Node_Geometry_Source_Semantic Node_Geometry_Source::semantic() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.semantic)
  return static_cast< ::viro::Node_Geometry_Source_Semantic >(semantic_);
}
inline void Node_Geometry_Source::set_semantic(::viro::Node_Geometry_Source_Semantic value) {
  
  semantic_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.semantic)
}

// uint32 vertex_count = 2;
inline void Node_Geometry_Source::clear_vertex_count() {
  vertex_count_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::vertex_count() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.vertex_count)
  return vertex_count_;
}
inline void Node_Geometry_Source::set_vertex_count(::google::protobuf::uint32 value) {
  
  vertex_count_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.vertex_count)
}

// bool float_components = 3;
inline void Node_Geometry_Source::clear_float_components() {
  float_components_ = false;
}
inline bool Node_Geometry_Source::float_components() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.float_components)
  return float_components_;
}
inline void Node_Geometry_Source::set_float_components(bool value) {
  
  float_components_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.float_components)
}

// uint32 components_per_vertex = 4;
inline void Node_Geometry_Source::clear_components_per_vertex() {
  components_per_vertex_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::components_per_vertex() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.components_per_vertex)
  return components_per_vertex_;
}
inline void Node_Geometry_Source::set_components_per_vertex(::google::protobuf::uint32 value) {
  
  components_per_vertex_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.components_per_vertex)
}

// uint32 bytes_per_component = 5;
inline void Node_Geometry_Source::clear_bytes_per_component() {
  bytes_per_component_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::bytes_per_component() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.bytes_per_component)
  return bytes_per_component_;
}
inline void Node_Geometry_Source::set_bytes_per_component(::google::protobuf::uint32 value) {
  
  bytes_per_component_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.bytes_per_component)
}

// uint32 data_offset = 6;
inline void Node_Geometry_Source::clear_data_offset() {
  data_offset_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::data_offset() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data_offset)
  return data_offset_;
}
inline void Node_Geometry_Source::set_data_offset(::google::protobuf::uint32 value) {
  
  data_offset_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data_offset)
}

// uint32 data_stride = 7;
inline void Node_Geometry_Source::clear_data_stride() {
  data_stride_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Source::data_stride() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data_stride)
  return data_stride_;
}
inline void Node_Geometry_Source::set_data_stride(::google::protobuf::uint32 value) {
  
  data_stride_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data_stride)
}

// bytes data = 8;
inline void Node_Geometry_Source::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Source::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Source.data)
  return data_.GetNoArena();
}
inline void Node_Geometry_Source::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Source.data)
}
#if LANG_CXX11
inline void Node_Geometry_Source::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Source.data)
}
#endif
inline void Node_Geometry_Source::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Source.data)
}
inline void Node_Geometry_Source::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Source.data)
}
inline ::std::string* Node_Geometry_Source::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Source.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Source::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Source.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Source::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Source.data)
}

// -------------------------------------------------------------------

// Node_Geometry_Element

// bytes data = 1;
inline void Node_Geometry_Element::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Element::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.data)
  return data_.GetNoArena();
}
inline void Node_Geometry_Element::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.data)
}
#if LANG_CXX11
inline void Node_Geometry_Element::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Element.data)
}
#endif
inline void Node_Geometry_Element::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Element.data)
}
inline void Node_Geometry_Element::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Element.data)
}
inline ::std::string* Node_Geometry_Element::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Element.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Element::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Element.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Element::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Element.data)
}

// .viro.Node.Geometry.Element.Primitive primitive = 2;
inline void Node_Geometry_Element::clear_primitive() {
  primitive_ = 0;
}
inline ::viro::Node_Geometry_Element_Primitive Node_Geometry_Element::primitive() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.primitive)
  return static_cast< ::viro::Node_Geometry_Element_Primitive >(primitive_);
}
inline void Node_Geometry_Element::set_primitive(::viro::Node_Geometry_Element_Primitive value) {
  
  primitive_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.primitive)
}

// uint32 primitive_count = 3;
inline void Node_Geometry_Element::clear_primitive_count() {
  primitive_count_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Element::primitive_count() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.primitive_count)
  return primitive_count_;
}
inline void Node_Geometry_Element::set_primitive_count(::google::protobuf::uint32 value) {
  
  primitive_count_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.primitive_count)
}

// uint32 bytes_per_index = 4;
inline void Node_Geometry_Element::clear_bytes_per_index() {
  bytes_per_index_ = 0u;
}
inline ::google::protobuf::uint32 Node_Geometry_Element::bytes_per_index() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Element.bytes_per_index)
  return bytes_per_index_;
}
inline void Node_Geometry_Element::set_bytes_per_index(::google::protobuf::uint32 value) {
  
  bytes_per_index_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Element.bytes_per_index)
}

// -------------------------------------------------------------------

// Node_Geometry_Material_Visual

// repeated float color = 1;
inline int Node_Geometry_Material_Visual::color_size() const {
  return color_.size();
}
inline void Node_Geometry_Material_Visual::clear_color() {
  color_.Clear();
}
inline float Node_Geometry_Material_Visual::color(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.color)
  return color_.Get(index);
}
inline void Node_Geometry_Material_Visual::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.color)
}
inline void Node_Geometry_Material_Visual::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.Visual.color)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Geometry_Material_Visual::color() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.Visual.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Geometry_Material_Visual::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.Visual.color)
  return &color_;
}

// string texture = 2;
inline void Node_Geometry_Material_Visual::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Material_Visual::texture() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.texture)
  return texture_.GetNoArena();
}
inline void Node_Geometry_Material_Visual::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.texture)
}
#if LANG_CXX11
inline void Node_Geometry_Material_Visual::set_texture(::std::string&& value) {
  
  texture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Material.Visual.texture)
}
#endif
inline void Node_Geometry_Material_Visual::set_texture(const char* value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Material.Visual.texture)
}
inline void Node_Geometry_Material_Visual::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Material.Visual.texture)
}
inline ::std::string* Node_Geometry_Material_Visual::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.Visual.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Material_Visual::release_texture() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.Visual.texture)
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Material_Visual::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.Visual.texture)
}

// float intensity = 3;
inline void Node_Geometry_Material_Visual::clear_intensity() {
  intensity_ = 0;
}
inline float Node_Geometry_Material_Visual::intensity() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.intensity)
  return intensity_;
}
inline void Node_Geometry_Material_Visual::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.intensity)
}

// repeated float transform = 4;
inline int Node_Geometry_Material_Visual::transform_size() const {
  return transform_.size();
}
inline void Node_Geometry_Material_Visual::clear_transform() {
  transform_.Clear();
}
inline float Node_Geometry_Material_Visual::transform(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.transform)
  return transform_.Get(index);
}
inline void Node_Geometry_Material_Visual::set_transform(int index, float value) {
  transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.transform)
}
inline void Node_Geometry_Material_Visual::add_transform(float value) {
  transform_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Material.Visual.transform)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Geometry_Material_Visual::transform() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Material.Visual.transform)
  return transform_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Geometry_Material_Visual::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Material.Visual.transform)
  return &transform_;
}

// .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_s = 5;
inline void Node_Geometry_Material_Visual::clear_wrap_mode_s() {
  wrap_mode_s_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::wrap_mode_s() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.wrap_mode_s)
  return static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(wrap_mode_s_);
}
inline void Node_Geometry_Material_Visual::set_wrap_mode_s(::viro::Node_Geometry_Material_Visual_WrapMode value) {
  
  wrap_mode_s_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.wrap_mode_s)
}

// .viro.Node.Geometry.Material.Visual.WrapMode wrap_mode_t = 6;
inline void Node_Geometry_Material_Visual::clear_wrap_mode_t() {
  wrap_mode_t_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_WrapMode Node_Geometry_Material_Visual::wrap_mode_t() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.wrap_mode_t)
  return static_cast< ::viro::Node_Geometry_Material_Visual_WrapMode >(wrap_mode_t_);
}
inline void Node_Geometry_Material_Visual::set_wrap_mode_t(::viro::Node_Geometry_Material_Visual_WrapMode value) {
  
  wrap_mode_t_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.wrap_mode_t)
}

// .viro.Node.Geometry.Material.Visual.FilterMode minification_filter = 7;
inline void Node_Geometry_Material_Visual::clear_minification_filter() {
  minification_filter_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::minification_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.minification_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(minification_filter_);
}
inline void Node_Geometry_Material_Visual::set_minification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  minification_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.minification_filter)
}

// .viro.Node.Geometry.Material.Visual.FilterMode magnification_filter = 8;
inline void Node_Geometry_Material_Visual::clear_magnification_filter() {
  magnification_filter_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::magnification_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.magnification_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(magnification_filter_);
}
inline void Node_Geometry_Material_Visual::set_magnification_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  magnification_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.magnification_filter)
}

// .viro.Node.Geometry.Material.Visual.FilterMode mip_filter = 9;
inline void Node_Geometry_Material_Visual::clear_mip_filter() {
  mip_filter_ = 0;
}
inline ::viro::Node_Geometry_Material_Visual_FilterMode Node_Geometry_Material_Visual::mip_filter() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.Visual.mip_filter)
  return static_cast< ::viro::Node_Geometry_Material_Visual_FilterMode >(mip_filter_);
}
inline void Node_Geometry_Material_Visual::set_mip_filter(::viro::Node_Geometry_Material_Visual_FilterMode value) {
  
  mip_filter_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.Visual.mip_filter)
}

// -------------------------------------------------------------------

// Node_Geometry_Material

// string name = 1;
inline void Node_Geometry_Material::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry_Material::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.name)
  return name_.GetNoArena();
}
inline void Node_Geometry_Material::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.name)
}
#if LANG_CXX11
inline void Node_Geometry_Material::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.Material.name)
}
#endif
inline void Node_Geometry_Material::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.Material.name)
}
inline void Node_Geometry_Material::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.Material.name)
}
inline ::std::string* Node_Geometry_Material::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry_Material::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry_Material::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.name)
}

// float shininess = 2;
inline void Node_Geometry_Material::clear_shininess() {
  shininess_ = 0;
}
inline float Node_Geometry_Material::shininess() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.shininess)
  return shininess_;
}
inline void Node_Geometry_Material::set_shininess(float value) {
  
  shininess_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.shininess)
}

// float fresnel_exponent = 3;
inline void Node_Geometry_Material::clear_fresnel_exponent() {
  fresnel_exponent_ = 0;
}
inline float Node_Geometry_Material::fresnel_exponent() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.fresnel_exponent)
  return fresnel_exponent_;
}
inline void Node_Geometry_Material::set_fresnel_exponent(float value) {
  
  fresnel_exponent_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.fresnel_exponent)
}

// float transparency = 4;
inline void Node_Geometry_Material::clear_transparency() {
  transparency_ = 0;
}
inline float Node_Geometry_Material::transparency() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.transparency)
  return transparency_;
}
inline void Node_Geometry_Material::set_transparency(float value) {
  
  transparency_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.transparency)
}

// .viro.Node.Geometry.Material.LightingModel lighting_model = 5;
inline void Node_Geometry_Material::clear_lighting_model() {
  lighting_model_ = 0;
}
inline ::viro::Node_Geometry_Material_LightingModel Node_Geometry_Material::lighting_model() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.lighting_model)
  return static_cast< ::viro::Node_Geometry_Material_LightingModel >(lighting_model_);
}
inline void Node_Geometry_Material::set_lighting_model(::viro::Node_Geometry_Material_LightingModel value) {
  
  lighting_model_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.lighting_model)
}

// bool lit_per_pixel = 6;
inline void Node_Geometry_Material::clear_lit_per_pixel() {
  lit_per_pixel_ = false;
}
inline bool Node_Geometry_Material::lit_per_pixel() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.lit_per_pixel)
  return lit_per_pixel_;
}
inline void Node_Geometry_Material::set_lit_per_pixel(bool value) {
  
  lit_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.lit_per_pixel)
}

// .viro.Node.Geometry.Material.CullMode cull_mode = 7;
inline void Node_Geometry_Material::clear_cull_mode() {
  cull_mode_ = 0;
}
inline ::viro::Node_Geometry_Material_CullMode Node_Geometry_Material::cull_mode() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.cull_mode)
  return static_cast< ::viro::Node_Geometry_Material_CullMode >(cull_mode_);
}
inline void Node_Geometry_Material::set_cull_mode(::viro::Node_Geometry_Material_CullMode value) {
  
  cull_mode_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.cull_mode)
}

// .viro.Node.Geometry.Material.BlendMode blend_mode = 8;
inline void Node_Geometry_Material::clear_blend_mode() {
  blend_mode_ = 0;
}
inline ::viro::Node_Geometry_Material_BlendMode Node_Geometry_Material::blend_mode() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.blend_mode)
  return static_cast< ::viro::Node_Geometry_Material_BlendMode >(blend_mode_);
}
inline void Node_Geometry_Material::set_blend_mode(::viro::Node_Geometry_Material_BlendMode value) {
  
  blend_mode_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.blend_mode)
}

// bool reads_from_depth_buffer = 9;
inline void Node_Geometry_Material::clear_reads_from_depth_buffer() {
  reads_from_depth_buffer_ = false;
}
inline bool Node_Geometry_Material::reads_from_depth_buffer() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.reads_from_depth_buffer)
  return reads_from_depth_buffer_;
}
inline void Node_Geometry_Material::set_reads_from_depth_buffer(bool value) {
  
  reads_from_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.reads_from_depth_buffer)
}

// bool writes_to_depth_buffer = 10;
inline void Node_Geometry_Material::clear_writes_to_depth_buffer() {
  writes_to_depth_buffer_ = false;
}
inline bool Node_Geometry_Material::writes_to_depth_buffer() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.writes_to_depth_buffer)
  return writes_to_depth_buffer_;
}
inline void Node_Geometry_Material::set_writes_to_depth_buffer(bool value) {
  
  writes_to_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.Material.writes_to_depth_buffer)
}

// .viro.Node.Geometry.Material.Visual diffuse = 11;
inline bool Node_Geometry_Material::has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != NULL;
}
inline void Node_Geometry_Material::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) delete diffuse_;
  diffuse_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::diffuse() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.diffuse)
  return diffuse_ != NULL ? *diffuse_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    diffuse_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.diffuse)
  return diffuse_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_diffuse() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.diffuse)
  
  ::viro::Node_Geometry_Material_Visual* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_diffuse(::viro::Node_Geometry_Material_Visual* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.diffuse)
}

// .viro.Node.Geometry.Material.Visual specular = 12;
inline bool Node_Geometry_Material::has_specular() const {
  return this != internal_default_instance() && specular_ != NULL;
}
inline void Node_Geometry_Material::clear_specular() {
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) delete specular_;
  specular_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::specular() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.specular)
  return specular_ != NULL ? *specular_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_specular() {
  
  if (specular_ == NULL) {
    specular_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.specular)
  return specular_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_specular() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.specular)
  
  ::viro::Node_Geometry_Material_Visual* temp = specular_;
  specular_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_specular(::viro::Node_Geometry_Material_Visual* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.specular)
}

// .viro.Node.Geometry.Material.Visual normal = 13;
inline bool Node_Geometry_Material::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
inline void Node_Geometry_Material::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) delete normal_;
  normal_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::normal() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.normal)
  return normal_ != NULL ? *normal_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_normal() {
  
  if (normal_ == NULL) {
    normal_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.normal)
  return normal_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_normal() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.normal)
  
  ::viro::Node_Geometry_Material_Visual* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_normal(::viro::Node_Geometry_Material_Visual* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.normal)
}

// .viro.Node.Geometry.Material.Visual reflective = 14;
inline bool Node_Geometry_Material::has_reflective() const {
  return this != internal_default_instance() && reflective_ != NULL;
}
inline void Node_Geometry_Material::clear_reflective() {
  if (GetArenaNoVirtual() == NULL && reflective_ != NULL) delete reflective_;
  reflective_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::reflective() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.reflective)
  return reflective_ != NULL ? *reflective_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_reflective() {
  
  if (reflective_ == NULL) {
    reflective_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.reflective)
  return reflective_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_reflective() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.reflective)
  
  ::viro::Node_Geometry_Material_Visual* temp = reflective_;
  reflective_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_reflective(::viro::Node_Geometry_Material_Visual* reflective) {
  delete reflective_;
  reflective_ = reflective;
  if (reflective) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.reflective)
}

// .viro.Node.Geometry.Material.Visual emission = 15;
inline bool Node_Geometry_Material::has_emission() const {
  return this != internal_default_instance() && emission_ != NULL;
}
inline void Node_Geometry_Material::clear_emission() {
  if (GetArenaNoVirtual() == NULL && emission_ != NULL) delete emission_;
  emission_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::emission() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.emission)
  return emission_ != NULL ? *emission_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_emission() {
  
  if (emission_ == NULL) {
    emission_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.emission)
  return emission_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_emission() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.emission)
  
  ::viro::Node_Geometry_Material_Visual* temp = emission_;
  emission_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_emission(::viro::Node_Geometry_Material_Visual* emission) {
  delete emission_;
  emission_ = emission;
  if (emission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.emission)
}

// .viro.Node.Geometry.Material.Visual multiply = 16;
inline bool Node_Geometry_Material::has_multiply() const {
  return this != internal_default_instance() && multiply_ != NULL;
}
inline void Node_Geometry_Material::clear_multiply() {
  if (GetArenaNoVirtual() == NULL && multiply_ != NULL) delete multiply_;
  multiply_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::multiply() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.multiply)
  return multiply_ != NULL ? *multiply_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_multiply() {
  
  if (multiply_ == NULL) {
    multiply_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.multiply)
  return multiply_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_multiply() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.multiply)
  
  ::viro::Node_Geometry_Material_Visual* temp = multiply_;
  multiply_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_multiply(::viro::Node_Geometry_Material_Visual* multiply) {
  delete multiply_;
  multiply_ = multiply;
  if (multiply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.multiply)
}

// .viro.Node.Geometry.Material.Visual roughness = 17;
inline bool Node_Geometry_Material::has_roughness() const {
  return this != internal_default_instance() && roughness_ != NULL;
}
inline void Node_Geometry_Material::clear_roughness() {
  if (GetArenaNoVirtual() == NULL && roughness_ != NULL) delete roughness_;
  roughness_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::roughness() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.roughness)
  return roughness_ != NULL ? *roughness_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_roughness() {
  
  if (roughness_ == NULL) {
    roughness_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.roughness)
  return roughness_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_roughness() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.roughness)
  
  ::viro::Node_Geometry_Material_Visual* temp = roughness_;
  roughness_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_roughness(::viro::Node_Geometry_Material_Visual* roughness) {
  delete roughness_;
  roughness_ = roughness;
  if (roughness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.roughness)
}

// .viro.Node.Geometry.Material.Visual metalness = 18;
inline bool Node_Geometry_Material::has_metalness() const {
  return this != internal_default_instance() && metalness_ != NULL;
}
inline void Node_Geometry_Material::clear_metalness() {
  if (GetArenaNoVirtual() == NULL && metalness_ != NULL) delete metalness_;
  metalness_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::metalness() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.metalness)
  return metalness_ != NULL ? *metalness_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_metalness() {
  
  if (metalness_ == NULL) {
    metalness_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.metalness)
  return metalness_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_metalness() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.metalness)
  
  ::viro::Node_Geometry_Material_Visual* temp = metalness_;
  metalness_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_metalness(::viro::Node_Geometry_Material_Visual* metalness) {
  delete metalness_;
  metalness_ = metalness;
  if (metalness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.metalness)
}

// .viro.Node.Geometry.Material.Visual ao = 19;
inline bool Node_Geometry_Material::has_ao() const {
  return this != internal_default_instance() && ao_ != NULL;
}
inline void Node_Geometry_Material::clear_ao() {
  if (GetArenaNoVirtual() == NULL && ao_ != NULL) delete ao_;
  ao_ = NULL;
}
inline const ::viro::Node_Geometry_Material_Visual& Node_Geometry_Material::ao() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Material.ao)
  return ao_ != NULL ? *ao_
                         : *::viro::Node_Geometry_Material_Visual::internal_default_instance();
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::mutable_ao() {
  
  if (ao_ == NULL) {
    ao_ = new ::viro::Node_Geometry_Material_Visual;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Material.ao)
  return ao_;
}
inline ::viro::Node_Geometry_Material_Visual* Node_Geometry_Material::release_ao() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Material.ao)
  
  ::viro::Node_Geometry_Material_Visual* temp = ao_;
  ao_ = NULL;
  return temp;
}
inline void Node_Geometry_Material::set_allocated_ao(::viro::Node_Geometry_Material_Visual* ao) {
  delete ao_;
  ao_ = ao;
  if (ao) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Material.ao)
}

// -------------------------------------------------------------------

// Node_Geometry_Skin

// .viro.Node.Matrix geometry_bind_transform = 1;
inline bool Node_Geometry_Skin::has_geometry_bind_transform() const {
  return this != internal_default_instance() && geometry_bind_transform_ != NULL;
}
inline void Node_Geometry_Skin::clear_geometry_bind_transform() {
  if (GetArenaNoVirtual() == NULL && geometry_bind_transform_ != NULL) delete geometry_bind_transform_;
  geometry_bind_transform_ = NULL;
}
inline const ::viro::Node_Matrix& Node_Geometry_Skin::geometry_bind_transform() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Skin.geometry_bind_transform)
  return geometry_bind_transform_ != NULL ? *geometry_bind_transform_
                         : *::viro::Node_Matrix::internal_default_instance();
}
inline ::viro::Node_Matrix* Node_Geometry_Skin::mutable_geometry_bind_transform() {
  
  if (geometry_bind_transform_ == NULL) {
    geometry_bind_transform_ = new ::viro::Node_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Skin.geometry_bind_transform)
  return geometry_bind_transform_;
}
inline ::viro::Node_Matrix* Node_Geometry_Skin::release_geometry_bind_transform() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Skin.geometry_bind_transform)
  
  ::viro::Node_Matrix* temp = geometry_bind_transform_;
  geometry_bind_transform_ = NULL;
  return temp;
}
inline void Node_Geometry_Skin::set_allocated_geometry_bind_transform(::viro::Node_Matrix* geometry_bind_transform) {
  delete geometry_bind_transform_;
  geometry_bind_transform_ = geometry_bind_transform;
  if (geometry_bind_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Skin.geometry_bind_transform)
}

// repeated .viro.Node.Matrix bind_transform = 2;
inline int Node_Geometry_Skin::bind_transform_size() const {
  return bind_transform_.size();
}
inline void Node_Geometry_Skin::clear_bind_transform() {
  bind_transform_.Clear();
}
inline const ::viro::Node_Matrix& Node_Geometry_Skin::bind_transform(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Skin.bind_transform)
  return bind_transform_.Get(index);
}
inline ::viro::Node_Matrix* Node_Geometry_Skin::mutable_bind_transform(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Skin.bind_transform)
  return bind_transform_.Mutable(index);
}
inline ::viro::Node_Matrix* Node_Geometry_Skin::add_bind_transform() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.Skin.bind_transform)
  return bind_transform_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >*
Node_Geometry_Skin::mutable_bind_transform() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.Skin.bind_transform)
  return &bind_transform_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >&
Node_Geometry_Skin::bind_transform() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.Skin.bind_transform)
  return bind_transform_;
}

// .viro.Node.Geometry.Source bone_indices = 3;
inline bool Node_Geometry_Skin::has_bone_indices() const {
  return this != internal_default_instance() && bone_indices_ != NULL;
}
inline void Node_Geometry_Skin::clear_bone_indices() {
  if (GetArenaNoVirtual() == NULL && bone_indices_ != NULL) delete bone_indices_;
  bone_indices_ = NULL;
}
inline const ::viro::Node_Geometry_Source& Node_Geometry_Skin::bone_indices() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Skin.bone_indices)
  return bone_indices_ != NULL ? *bone_indices_
                         : *::viro::Node_Geometry_Source::internal_default_instance();
}
inline ::viro::Node_Geometry_Source* Node_Geometry_Skin::mutable_bone_indices() {
  
  if (bone_indices_ == NULL) {
    bone_indices_ = new ::viro::Node_Geometry_Source;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Skin.bone_indices)
  return bone_indices_;
}
inline ::viro::Node_Geometry_Source* Node_Geometry_Skin::release_bone_indices() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Skin.bone_indices)
  
  ::viro::Node_Geometry_Source* temp = bone_indices_;
  bone_indices_ = NULL;
  return temp;
}
inline void Node_Geometry_Skin::set_allocated_bone_indices(::viro::Node_Geometry_Source* bone_indices) {
  delete bone_indices_;
  bone_indices_ = bone_indices;
  if (bone_indices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Skin.bone_indices)
}

// .viro.Node.Geometry.Source bone_weights = 4;
inline bool Node_Geometry_Skin::has_bone_weights() const {
  return this != internal_default_instance() && bone_weights_ != NULL;
}
inline void Node_Geometry_Skin::clear_bone_weights() {
  if (GetArenaNoVirtual() == NULL && bone_weights_ != NULL) delete bone_weights_;
  bone_weights_ = NULL;
}
inline const ::viro::Node_Geometry_Source& Node_Geometry_Skin::bone_weights() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.Skin.bone_weights)
  return bone_weights_ != NULL ? *bone_weights_
                         : *::viro::Node_Geometry_Source::internal_default_instance();
}
inline ::viro::Node_Geometry_Source* Node_Geometry_Skin::mutable_bone_weights() {
  
  if (bone_weights_ == NULL) {
    bone_weights_ = new ::viro::Node_Geometry_Source;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.Skin.bone_weights)
  return bone_weights_;
}
inline ::viro::Node_Geometry_Source* Node_Geometry_Skin::release_bone_weights() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.Skin.bone_weights)
  
  ::viro::Node_Geometry_Source* temp = bone_weights_;
  bone_weights_ = NULL;
  return temp;
}
inline void Node_Geometry_Skin::set_allocated_bone_weights(::viro::Node_Geometry_Source* bone_weights) {
  delete bone_weights_;
  bone_weights_ = bone_weights;
  if (bone_weights) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.Skin.bone_weights)
}

// -------------------------------------------------------------------

// Node_Geometry

// string name = 1;
inline void Node_Geometry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.name)
  return name_.GetNoArena();
}
inline void Node_Geometry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.name)
}
#if LANG_CXX11
inline void Node_Geometry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.name)
}
#endif
inline void Node_Geometry::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.name)
}
inline void Node_Geometry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.name)
}
inline ::std::string* Node_Geometry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.name)
}

// bytes data = 2;
inline void Node_Geometry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Geometry::data() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.data)
  return data_.GetNoArena();
}
inline void Node_Geometry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Geometry.data)
}
#if LANG_CXX11
inline void Node_Geometry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Geometry.data)
}
#endif
inline void Node_Geometry::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Geometry.data)
}
inline void Node_Geometry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Geometry.data)
}
inline ::std::string* Node_Geometry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Geometry::release_data() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Geometry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.data)
}

// repeated .viro.Node.Geometry.Source source = 3;
inline int Node_Geometry::source_size() const {
  return source_.size();
}
inline void Node_Geometry::clear_source() {
  source_.Clear();
}
inline const ::viro::Node_Geometry_Source& Node_Geometry::source(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.source)
  return source_.Get(index);
}
inline ::viro::Node_Geometry_Source* Node_Geometry::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.source)
  return source_.Mutable(index);
}
inline ::viro::Node_Geometry_Source* Node_Geometry::add_source() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.source)
  return source_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >*
Node_Geometry::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.source)
  return &source_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Source >&
Node_Geometry::source() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.source)
  return source_;
}

// repeated .viro.Node.Geometry.Element element = 4;
inline int Node_Geometry::element_size() const {
  return element_.size();
}
inline void Node_Geometry::clear_element() {
  element_.Clear();
}
inline const ::viro::Node_Geometry_Element& Node_Geometry::element(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.element)
  return element_.Get(index);
}
inline ::viro::Node_Geometry_Element* Node_Geometry::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.element)
  return element_.Mutable(index);
}
inline ::viro::Node_Geometry_Element* Node_Geometry::add_element() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >*
Node_Geometry::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Element >&
Node_Geometry::element() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.element)
  return element_;
}

// repeated .viro.Node.Geometry.Material material = 5;
inline int Node_Geometry::material_size() const {
  return material_.size();
}
inline void Node_Geometry::clear_material() {
  material_.Clear();
}
inline const ::viro::Node_Geometry_Material& Node_Geometry::material(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.material)
  return material_.Get(index);
}
inline ::viro::Node_Geometry_Material* Node_Geometry::mutable_material(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.material)
  return material_.Mutable(index);
}
inline ::viro::Node_Geometry_Material* Node_Geometry::add_material() {
  // @@protoc_insertion_point(field_add:viro.Node.Geometry.material)
  return material_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >*
Node_Geometry::mutable_material() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Geometry.material)
  return &material_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Geometry_Material >&
Node_Geometry::material() const {
  // @@protoc_insertion_point(field_list:viro.Node.Geometry.material)
  return material_;
}

// .viro.Node.Geometry.Skin skin = 6;
inline bool Node_Geometry::has_skin() const {
  return this != internal_default_instance() && skin_ != NULL;
}
inline void Node_Geometry::clear_skin() {
  if (GetArenaNoVirtual() == NULL && skin_ != NULL) delete skin_;
  skin_ = NULL;
}
inline const ::viro::Node_Geometry_Skin& Node_Geometry::skin() const {
  // @@protoc_insertion_point(field_get:viro.Node.Geometry.skin)
  return skin_ != NULL ? *skin_
                         : *::viro::Node_Geometry_Skin::internal_default_instance();
}
inline ::viro::Node_Geometry_Skin* Node_Geometry::mutable_skin() {
  
  if (skin_ == NULL) {
    skin_ = new ::viro::Node_Geometry_Skin;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Geometry.skin)
  return skin_;
}
inline ::viro::Node_Geometry_Skin* Node_Geometry::release_skin() {
  // @@protoc_insertion_point(field_release:viro.Node.Geometry.skin)
  
  ::viro::Node_Geometry_Skin* temp = skin_;
  skin_ = NULL;
  return temp;
}
inline void Node_Geometry::set_allocated_skin(::viro::Node_Geometry_Skin* skin) {
  delete skin_;
  skin_ = skin;
  if (skin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Geometry.skin)
}

// -------------------------------------------------------------------

// Node_Skeleton_Bone

// string name = 1;
inline void Node_Skeleton_Bone::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Skeleton_Bone::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.Bone.name)
  return name_.GetNoArena();
}
inline void Node_Skeleton_Bone::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Skeleton.Bone.name)
}
#if LANG_CXX11
inline void Node_Skeleton_Bone::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Skeleton.Bone.name)
}
#endif
inline void Node_Skeleton_Bone::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Skeleton.Bone.name)
}
inline void Node_Skeleton_Bone::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Skeleton.Bone.name)
}
inline ::std::string* Node_Skeleton_Bone::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.Bone.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Skeleton_Bone::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Skeleton.Bone.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Skeleton_Bone::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Skeleton.Bone.name)
}

// int32 parent_index = 2;
inline void Node_Skeleton_Bone::clear_parent_index() {
  parent_index_ = 0;
}
inline ::google::protobuf::int32 Node_Skeleton_Bone::parent_index() const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.Bone.parent_index)
  return parent_index_;
}
inline void Node_Skeleton_Bone::set_parent_index(::google::protobuf::int32 value) {
  
  parent_index_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Skeleton.Bone.parent_index)
}

// .viro.Node.Matrix local_transform = 3;
inline bool Node_Skeleton_Bone::has_local_transform() const {
  return this != internal_default_instance() && local_transform_ != NULL;
}
inline void Node_Skeleton_Bone::clear_local_transform() {
  if (GetArenaNoVirtual() == NULL && local_transform_ != NULL) delete local_transform_;
  local_transform_ = NULL;
}
inline const ::viro::Node_Matrix& Node_Skeleton_Bone::local_transform() const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.Bone.local_transform)
  return local_transform_ != NULL ? *local_transform_
                         : *::viro::Node_Matrix::internal_default_instance();
}
inline ::viro::Node_Matrix* Node_Skeleton_Bone::mutable_local_transform() {
  
  if (local_transform_ == NULL) {
    local_transform_ = new ::viro::Node_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.Bone.local_transform)
  return local_transform_;
}
inline ::viro::Node_Matrix* Node_Skeleton_Bone::release_local_transform() {
  // @@protoc_insertion_point(field_release:viro.Node.Skeleton.Bone.local_transform)
  
  ::viro::Node_Matrix* temp = local_transform_;
  local_transform_ = NULL;
  return temp;
}
inline void Node_Skeleton_Bone::set_allocated_local_transform(::viro::Node_Matrix* local_transform) {
  delete local_transform_;
  local_transform_ = local_transform;
  if (local_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Skeleton.Bone.local_transform)
}

// .viro.Node.Matrix bind_transform = 4;
inline bool Node_Skeleton_Bone::has_bind_transform() const {
  return this != internal_default_instance() && bind_transform_ != NULL;
}
inline void Node_Skeleton_Bone::clear_bind_transform() {
  if (GetArenaNoVirtual() == NULL && bind_transform_ != NULL) delete bind_transform_;
  bind_transform_ = NULL;
}
inline const ::viro::Node_Matrix& Node_Skeleton_Bone::bind_transform() const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.Bone.bind_transform)
  return bind_transform_ != NULL ? *bind_transform_
                         : *::viro::Node_Matrix::internal_default_instance();
}
inline ::viro::Node_Matrix* Node_Skeleton_Bone::mutable_bind_transform() {
  
  if (bind_transform_ == NULL) {
    bind_transform_ = new ::viro::Node_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.Bone.bind_transform)
  return bind_transform_;
}
inline ::viro::Node_Matrix* Node_Skeleton_Bone::release_bind_transform() {
  // @@protoc_insertion_point(field_release:viro.Node.Skeleton.Bone.bind_transform)
  
  ::viro::Node_Matrix* temp = bind_transform_;
  bind_transform_ = NULL;
  return temp;
}
inline void Node_Skeleton_Bone::set_allocated_bind_transform(::viro::Node_Matrix* bind_transform) {
  delete bind_transform_;
  bind_transform_ = bind_transform;
  if (bind_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Skeleton.Bone.bind_transform)
}

// repeated .viro.Node.Skeleton.BoneAttachmentPair attachment_transforms = 5;
inline int Node_Skeleton_Bone::attachment_transforms_size() const {
  return attachment_transforms_.size();
}
inline void Node_Skeleton_Bone::clear_attachment_transforms() {
  attachment_transforms_.Clear();
}
inline const ::viro::Node_Skeleton_BoneAttachmentPair& Node_Skeleton_Bone::attachment_transforms(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.Bone.attachment_transforms)
  return attachment_transforms_.Get(index);
}
inline ::viro::Node_Skeleton_BoneAttachmentPair* Node_Skeleton_Bone::mutable_attachment_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.Bone.attachment_transforms)
  return attachment_transforms_.Mutable(index);
}
inline ::viro::Node_Skeleton_BoneAttachmentPair* Node_Skeleton_Bone::add_attachment_transforms() {
  // @@protoc_insertion_point(field_add:viro.Node.Skeleton.Bone.attachment_transforms)
  return attachment_transforms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_BoneAttachmentPair >*
Node_Skeleton_Bone::mutable_attachment_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Skeleton.Bone.attachment_transforms)
  return &attachment_transforms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_BoneAttachmentPair >&
Node_Skeleton_Bone::attachment_transforms() const {
  // @@protoc_insertion_point(field_list:viro.Node.Skeleton.Bone.attachment_transforms)
  return attachment_transforms_;
}

// -------------------------------------------------------------------

// Node_Skeleton_BoneAttachmentPair

// string key = 1;
inline void Node_Skeleton_BoneAttachmentPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Skeleton_BoneAttachmentPair::key() const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.BoneAttachmentPair.key)
  return key_.GetNoArena();
}
inline void Node_Skeleton_BoneAttachmentPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Skeleton.BoneAttachmentPair.key)
}
#if LANG_CXX11
inline void Node_Skeleton_BoneAttachmentPair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Skeleton.BoneAttachmentPair.key)
}
#endif
inline void Node_Skeleton_BoneAttachmentPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Skeleton.BoneAttachmentPair.key)
}
inline void Node_Skeleton_BoneAttachmentPair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Skeleton.BoneAttachmentPair.key)
}
inline ::std::string* Node_Skeleton_BoneAttachmentPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.BoneAttachmentPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Skeleton_BoneAttachmentPair::release_key() {
  // @@protoc_insertion_point(field_release:viro.Node.Skeleton.BoneAttachmentPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Skeleton_BoneAttachmentPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Skeleton.BoneAttachmentPair.key)
}

// .viro.Node.Matrix value = 2;
inline bool Node_Skeleton_BoneAttachmentPair::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Node_Skeleton_BoneAttachmentPair::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::viro::Node_Matrix& Node_Skeleton_BoneAttachmentPair::value() const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.BoneAttachmentPair.value)
  return value_ != NULL ? *value_
                         : *::viro::Node_Matrix::internal_default_instance();
}
inline ::viro::Node_Matrix* Node_Skeleton_BoneAttachmentPair::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::viro::Node_Matrix;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.BoneAttachmentPair.value)
  return value_;
}
inline ::viro::Node_Matrix* Node_Skeleton_BoneAttachmentPair::release_value() {
  // @@protoc_insertion_point(field_release:viro.Node.Skeleton.BoneAttachmentPair.value)
  
  ::viro::Node_Matrix* temp = value_;
  value_ = NULL;
  return temp;
}
inline void Node_Skeleton_BoneAttachmentPair::set_allocated_value(::viro::Node_Matrix* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Skeleton.BoneAttachmentPair.value)
}

// -------------------------------------------------------------------

// Node_Skeleton

// repeated .viro.Node.Skeleton.Bone bone = 1;
inline int Node_Skeleton::bone_size() const {
  return bone_.size();
}
inline void Node_Skeleton::clear_bone() {
  bone_.Clear();
}
inline const ::viro::Node_Skeleton_Bone& Node_Skeleton::bone(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Skeleton.bone)
  return bone_.Get(index);
}
inline ::viro::Node_Skeleton_Bone* Node_Skeleton::mutable_bone(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.Skeleton.bone)
  return bone_.Mutable(index);
}
inline ::viro::Node_Skeleton_Bone* Node_Skeleton::add_bone() {
  // @@protoc_insertion_point(field_add:viro.Node.Skeleton.bone)
  return bone_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_Bone >*
Node_Skeleton::mutable_bone() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Skeleton.bone)
  return &bone_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Skeleton_Bone >&
Node_Skeleton::bone() const {
  // @@protoc_insertion_point(field_list:viro.Node.Skeleton.bone)
  return bone_;
}

// -------------------------------------------------------------------

// Node_SkeletalAnimation_Frame

// float time = 1;
inline void Node_SkeletalAnimation_Frame::clear_time() {
  time_ = 0;
}
inline float Node_SkeletalAnimation_Frame::time() const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.Frame.time)
  return time_;
}
inline void Node_SkeletalAnimation_Frame::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.SkeletalAnimation.Frame.time)
}

// repeated int32 bone_index = 2;
inline int Node_SkeletalAnimation_Frame::bone_index_size() const {
  return bone_index_.size();
}
inline void Node_SkeletalAnimation_Frame::clear_bone_index() {
  bone_index_.Clear();
}
inline ::google::protobuf::int32 Node_SkeletalAnimation_Frame::bone_index(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.Frame.bone_index)
  return bone_index_.Get(index);
}
inline void Node_SkeletalAnimation_Frame::set_bone_index(int index, ::google::protobuf::int32 value) {
  bone_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.SkeletalAnimation.Frame.bone_index)
}
inline void Node_SkeletalAnimation_Frame::add_bone_index(::google::protobuf::int32 value) {
  bone_index_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.SkeletalAnimation.Frame.bone_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Node_SkeletalAnimation_Frame::bone_index() const {
  // @@protoc_insertion_point(field_list:viro.Node.SkeletalAnimation.Frame.bone_index)
  return bone_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Node_SkeletalAnimation_Frame::mutable_bone_index() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.SkeletalAnimation.Frame.bone_index)
  return &bone_index_;
}

// repeated .viro.Node.Matrix transform = 3;
inline int Node_SkeletalAnimation_Frame::transform_size() const {
  return transform_.size();
}
inline void Node_SkeletalAnimation_Frame::clear_transform() {
  transform_.Clear();
}
inline const ::viro::Node_Matrix& Node_SkeletalAnimation_Frame::transform(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.Frame.transform)
  return transform_.Get(index);
}
inline ::viro::Node_Matrix* Node_SkeletalAnimation_Frame::mutable_transform(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.SkeletalAnimation.Frame.transform)
  return transform_.Mutable(index);
}
inline ::viro::Node_Matrix* Node_SkeletalAnimation_Frame::add_transform() {
  // @@protoc_insertion_point(field_add:viro.Node.SkeletalAnimation.Frame.transform)
  return transform_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >*
Node_SkeletalAnimation_Frame::mutable_transform() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.SkeletalAnimation.Frame.transform)
  return &transform_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >&
Node_SkeletalAnimation_Frame::transform() const {
  // @@protoc_insertion_point(field_list:viro.Node.SkeletalAnimation.Frame.transform)
  return transform_;
}

// repeated .viro.Node.Matrix local_transform = 4;
inline int Node_SkeletalAnimation_Frame::local_transform_size() const {
  return local_transform_.size();
}
inline void Node_SkeletalAnimation_Frame::clear_local_transform() {
  local_transform_.Clear();
}
inline const ::viro::Node_Matrix& Node_SkeletalAnimation_Frame::local_transform(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.Frame.local_transform)
  return local_transform_.Get(index);
}
inline ::viro::Node_Matrix* Node_SkeletalAnimation_Frame::mutable_local_transform(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.SkeletalAnimation.Frame.local_transform)
  return local_transform_.Mutable(index);
}
inline ::viro::Node_Matrix* Node_SkeletalAnimation_Frame::add_local_transform() {
  // @@protoc_insertion_point(field_add:viro.Node.SkeletalAnimation.Frame.local_transform)
  return local_transform_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >*
Node_SkeletalAnimation_Frame::mutable_local_transform() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.SkeletalAnimation.Frame.local_transform)
  return &local_transform_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Matrix >&
Node_SkeletalAnimation_Frame::local_transform() const {
  // @@protoc_insertion_point(field_list:viro.Node.SkeletalAnimation.Frame.local_transform)
  return local_transform_;
}

// -------------------------------------------------------------------

// Node_SkeletalAnimation

// string name = 1;
inline void Node_SkeletalAnimation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_SkeletalAnimation::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.name)
  return name_.GetNoArena();
}
inline void Node_SkeletalAnimation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.SkeletalAnimation.name)
}
#if LANG_CXX11
inline void Node_SkeletalAnimation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.SkeletalAnimation.name)
}
#endif
inline void Node_SkeletalAnimation::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.SkeletalAnimation.name)
}
inline void Node_SkeletalAnimation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.SkeletalAnimation.name)
}
inline ::std::string* Node_SkeletalAnimation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.SkeletalAnimation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_SkeletalAnimation::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.SkeletalAnimation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_SkeletalAnimation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.SkeletalAnimation.name)
}

// repeated .viro.Node.SkeletalAnimation.Frame frame = 2;
inline int Node_SkeletalAnimation::frame_size() const {
  return frame_.size();
}
inline void Node_SkeletalAnimation::clear_frame() {
  frame_.Clear();
}
inline const ::viro::Node_SkeletalAnimation_Frame& Node_SkeletalAnimation::frame(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.frame)
  return frame_.Get(index);
}
inline ::viro::Node_SkeletalAnimation_Frame* Node_SkeletalAnimation::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.SkeletalAnimation.frame)
  return frame_.Mutable(index);
}
inline ::viro::Node_SkeletalAnimation_Frame* Node_SkeletalAnimation::add_frame() {
  // @@protoc_insertion_point(field_add:viro.Node.SkeletalAnimation.frame)
  return frame_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation_Frame >*
Node_SkeletalAnimation::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.SkeletalAnimation.frame)
  return &frame_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation_Frame >&
Node_SkeletalAnimation::frame() const {
  // @@protoc_insertion_point(field_list:viro.Node.SkeletalAnimation.frame)
  return frame_;
}

// int64 duration = 3;
inline void Node_SkeletalAnimation::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Node_SkeletalAnimation::duration() const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.duration)
  return duration_;
}
inline void Node_SkeletalAnimation::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.SkeletalAnimation.duration)
}

// bool has_scaling = 4;
inline void Node_SkeletalAnimation::clear_has_scaling() {
  has_scaling_ = false;
}
inline bool Node_SkeletalAnimation::has_scaling() const {
  // @@protoc_insertion_point(field_get:viro.Node.SkeletalAnimation.has_scaling)
  return has_scaling_;
}
inline void Node_SkeletalAnimation::set_has_scaling(bool value) {
  
  has_scaling_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.SkeletalAnimation.has_scaling)
}

// -------------------------------------------------------------------

// Node_KeyframeAnimation_Frame

// float time = 1;
inline void Node_KeyframeAnimation_Frame::clear_time() {
  time_ = 0;
}
inline float Node_KeyframeAnimation_Frame::time() const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.Frame.time)
  return time_;
}
inline void Node_KeyframeAnimation_Frame::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.KeyframeAnimation.Frame.time)
}

// repeated float translation = 2;
inline int Node_KeyframeAnimation_Frame::translation_size() const {
  return translation_.size();
}
inline void Node_KeyframeAnimation_Frame::clear_translation() {
  translation_.Clear();
}
inline float Node_KeyframeAnimation_Frame::translation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.Frame.translation)
  return translation_.Get(index);
}
inline void Node_KeyframeAnimation_Frame::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.KeyframeAnimation.Frame.translation)
}
inline void Node_KeyframeAnimation_Frame::add_translation(float value) {
  translation_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.KeyframeAnimation.Frame.translation)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_KeyframeAnimation_Frame::translation() const {
  // @@protoc_insertion_point(field_list:viro.Node.KeyframeAnimation.Frame.translation)
  return translation_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_KeyframeAnimation_Frame::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.KeyframeAnimation.Frame.translation)
  return &translation_;
}

// repeated float rotation = 3;
inline int Node_KeyframeAnimation_Frame::rotation_size() const {
  return rotation_.size();
}
inline void Node_KeyframeAnimation_Frame::clear_rotation() {
  rotation_.Clear();
}
inline float Node_KeyframeAnimation_Frame::rotation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.Frame.rotation)
  return rotation_.Get(index);
}
inline void Node_KeyframeAnimation_Frame::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.KeyframeAnimation.Frame.rotation)
}
inline void Node_KeyframeAnimation_Frame::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.KeyframeAnimation.Frame.rotation)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_KeyframeAnimation_Frame::rotation() const {
  // @@protoc_insertion_point(field_list:viro.Node.KeyframeAnimation.Frame.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_KeyframeAnimation_Frame::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.KeyframeAnimation.Frame.rotation)
  return &rotation_;
}

// repeated float scale = 4;
inline int Node_KeyframeAnimation_Frame::scale_size() const {
  return scale_.size();
}
inline void Node_KeyframeAnimation_Frame::clear_scale() {
  scale_.Clear();
}
inline float Node_KeyframeAnimation_Frame::scale(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.Frame.scale)
  return scale_.Get(index);
}
inline void Node_KeyframeAnimation_Frame::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.KeyframeAnimation.Frame.scale)
}
inline void Node_KeyframeAnimation_Frame::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.KeyframeAnimation.Frame.scale)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_KeyframeAnimation_Frame::scale() const {
  // @@protoc_insertion_point(field_list:viro.Node.KeyframeAnimation.Frame.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_KeyframeAnimation_Frame::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.KeyframeAnimation.Frame.scale)
  return &scale_;
}

// -------------------------------------------------------------------

// Node_KeyframeAnimation

// string name = 1;
inline void Node_KeyframeAnimation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_KeyframeAnimation::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.name)
  return name_.GetNoArena();
}
inline void Node_KeyframeAnimation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.KeyframeAnimation.name)
}
#if LANG_CXX11
inline void Node_KeyframeAnimation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.KeyframeAnimation.name)
}
#endif
inline void Node_KeyframeAnimation::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.KeyframeAnimation.name)
}
inline void Node_KeyframeAnimation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.KeyframeAnimation.name)
}
inline ::std::string* Node_KeyframeAnimation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.KeyframeAnimation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_KeyframeAnimation::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.KeyframeAnimation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_KeyframeAnimation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.KeyframeAnimation.name)
}

// repeated .viro.Node.KeyframeAnimation.Frame frame = 2;
inline int Node_KeyframeAnimation::frame_size() const {
  return frame_.size();
}
inline void Node_KeyframeAnimation::clear_frame() {
  frame_.Clear();
}
inline const ::viro::Node_KeyframeAnimation_Frame& Node_KeyframeAnimation::frame(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.frame)
  return frame_.Get(index);
}
inline ::viro::Node_KeyframeAnimation_Frame* Node_KeyframeAnimation::mutable_frame(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.KeyframeAnimation.frame)
  return frame_.Mutable(index);
}
inline ::viro::Node_KeyframeAnimation_Frame* Node_KeyframeAnimation::add_frame() {
  // @@protoc_insertion_point(field_add:viro.Node.KeyframeAnimation.frame)
  return frame_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation_Frame >*
Node_KeyframeAnimation::mutable_frame() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.KeyframeAnimation.frame)
  return &frame_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation_Frame >&
Node_KeyframeAnimation::frame() const {
  // @@protoc_insertion_point(field_list:viro.Node.KeyframeAnimation.frame)
  return frame_;
}

// int64 duration = 3;
inline void Node_KeyframeAnimation::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Node_KeyframeAnimation::duration() const {
  // @@protoc_insertion_point(field_get:viro.Node.KeyframeAnimation.duration)
  return duration_;
}
inline void Node_KeyframeAnimation::set_duration(::google::protobuf::int64 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.KeyframeAnimation.duration)
}

// -------------------------------------------------------------------

// Node_Light

// string name = 1;
inline void Node_Light::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node_Light::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.name)
  return name_.GetNoArena();
}
inline void Node_Light::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.name)
}
#if LANG_CXX11
inline void Node_Light::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.Light.name)
}
#endif
inline void Node_Light::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.Light.name)
}
inline void Node_Light::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.Light.name)
}
inline ::std::string* Node_Light::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.Light.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node_Light::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.Light.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node_Light::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.Light.name)
}

// .viro.Node.Light.LightType light_type = 2;
inline void Node_Light::clear_light_type() {
  light_type_ = 0;
}
inline ::viro::Node_Light_LightType Node_Light::light_type() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.light_type)
  return static_cast< ::viro::Node_Light_LightType >(light_type_);
}
inline void Node_Light::set_light_type(::viro::Node_Light_LightType value) {
  
  light_type_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.light_type)
}

// repeated float color = 3;
inline int Node_Light::color_size() const {
  return color_.size();
}
inline void Node_Light::clear_color() {
  color_.Clear();
}
inline float Node_Light::color(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.color)
  return color_.Get(index);
}
inline void Node_Light::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.color)
}
inline void Node_Light::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.color)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Light::color() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.color)
  return color_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Light::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.color)
  return &color_;
}

// repeated float position = 4;
inline int Node_Light::position_size() const {
  return position_.size();
}
inline void Node_Light::clear_position() {
  position_.Clear();
}
inline float Node_Light::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.position)
  return position_.Get(index);
}
inline void Node_Light::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.position)
}
inline void Node_Light::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Light::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Light::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.position)
  return &position_;
}

// repeated float direction = 5;
inline int Node_Light::direction_size() const {
  return direction_.size();
}
inline void Node_Light::clear_direction() {
  direction_.Clear();
}
inline float Node_Light::direction(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.direction)
  return direction_.Get(index);
}
inline void Node_Light::set_direction(int index, float value) {
  direction_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Light.direction)
}
inline void Node_Light::add_direction(float value) {
  direction_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Light.direction)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Light::direction() const {
  // @@protoc_insertion_point(field_list:viro.Node.Light.direction)
  return direction_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Light::mutable_direction() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Light.direction)
  return &direction_;
}

// float intensity = 6;
inline void Node_Light::clear_intensity() {
  intensity_ = 0;
}
inline float Node_Light::intensity() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.intensity)
  return intensity_;
}
inline void Node_Light::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.intensity)
}

// float temperature = 7;
inline void Node_Light::clear_temperature() {
  temperature_ = 0;
}
inline float Node_Light::temperature() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.temperature)
  return temperature_;
}
inline void Node_Light::set_temperature(float value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.temperature)
}

// float attenuation_start = 8;
inline void Node_Light::clear_attenuation_start() {
  attenuation_start_ = 0;
}
inline float Node_Light::attenuation_start() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_start)
  return attenuation_start_;
}
inline void Node_Light::set_attenuation_start(float value) {
  
  attenuation_start_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_start)
}

// float attenuation_end = 9;
inline void Node_Light::clear_attenuation_end() {
  attenuation_end_ = 0;
}
inline float Node_Light::attenuation_end() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_end)
  return attenuation_end_;
}
inline void Node_Light::set_attenuation_end(float value) {
  
  attenuation_end_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_end)
}

// float attenuation_falloff_exponent = 10;
inline void Node_Light::clear_attenuation_falloff_exponent() {
  attenuation_falloff_exponent_ = 0;
}
inline float Node_Light::attenuation_falloff_exponent() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.attenuation_falloff_exponent)
  return attenuation_falloff_exponent_;
}
inline void Node_Light::set_attenuation_falloff_exponent(float value) {
  
  attenuation_falloff_exponent_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.attenuation_falloff_exponent)
}

// float spot_inner_angle = 11;
inline void Node_Light::clear_spot_inner_angle() {
  spot_inner_angle_ = 0;
}
inline float Node_Light::spot_inner_angle() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.spot_inner_angle)
  return spot_inner_angle_;
}
inline void Node_Light::set_spot_inner_angle(float value) {
  
  spot_inner_angle_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.spot_inner_angle)
}

// float spot_outer_angle = 12;
inline void Node_Light::clear_spot_outer_angle() {
  spot_outer_angle_ = 0;
}
inline float Node_Light::spot_outer_angle() const {
  // @@protoc_insertion_point(field_get:viro.Node.Light.spot_outer_angle)
  return spot_outer_angle_;
}
inline void Node_Light::set_spot_outer_angle(float value) {
  
  spot_outer_angle_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.Light.spot_outer_angle)
}

// -------------------------------------------------------------------

// Node_Camera

// repeated float position = 1;
inline int Node_Camera::position_size() const {
  return position_.size();
}
inline void Node_Camera::clear_position() {
  position_.Clear();
}
inline float Node_Camera::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.Camera.position)
  return position_.Get(index);
}
inline void Node_Camera::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.Camera.position)
}
inline void Node_Camera::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.Camera.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Node_Camera::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.Camera.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Node_Camera::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.Camera.position)
  return &position_;
}

// -------------------------------------------------------------------

// Node

// string name = 1;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:viro.Node.name)
  return name_.GetNoArena();
}
inline void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:viro.Node.name)
}
#if LANG_CXX11
inline void Node::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:viro.Node.name)
}
#endif
inline void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:viro.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:viro.Node.name)
}
inline ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:viro.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:viro.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:viro.Node.name)
}

// repeated float position = 2;
inline int Node::position_size() const {
  return position_.size();
}
inline void Node::clear_position() {
  position_.Clear();
}
inline float Node::position(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.position)
  return position_.Get(index);
}
inline void Node::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.position)
}
inline void Node::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.position)
}
inline const ::google::protobuf::RepeatedField< float >&
Node::position() const {
  // @@protoc_insertion_point(field_list:viro.Node.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
Node::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.position)
  return &position_;
}

// repeated float scale = 3;
inline int Node::scale_size() const {
  return scale_.size();
}
inline void Node::clear_scale() {
  scale_.Clear();
}
inline float Node::scale(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.scale)
  return scale_.Get(index);
}
inline void Node::set_scale(int index, float value) {
  scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.scale)
}
inline void Node::add_scale(float value) {
  scale_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.scale)
}
inline const ::google::protobuf::RepeatedField< float >&
Node::scale() const {
  // @@protoc_insertion_point(field_list:viro.Node.scale)
  return scale_;
}
inline ::google::protobuf::RepeatedField< float >*
Node::mutable_scale() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.scale)
  return &scale_;
}

// repeated float rotation = 4;
inline int Node::rotation_size() const {
  return rotation_.size();
}
inline void Node::clear_rotation() {
  rotation_.Clear();
}
inline float Node::rotation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.rotation)
  return rotation_.Get(index);
}
inline void Node::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:viro.Node.rotation)
}
inline void Node::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:viro.Node.rotation)
}
inline const ::google::protobuf::RepeatedField< float >&
Node::rotation() const {
  // @@protoc_insertion_point(field_list:viro.Node.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< float >*
Node::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.rotation)
  return &rotation_;
}

// int32 rendering_order = 5;
inline void Node::clear_rendering_order() {
  rendering_order_ = 0;
}
inline ::google::protobuf::int32 Node::rendering_order() const {
  // @@protoc_insertion_point(field_get:viro.Node.rendering_order)
  return rendering_order_;
}
inline void Node::set_rendering_order(::google::protobuf::int32 value) {
  
  rendering_order_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.rendering_order)
}

// float opacity = 6;
inline void Node::clear_opacity() {
  opacity_ = 0;
}
inline float Node::opacity() const {
  // @@protoc_insertion_point(field_get:viro.Node.opacity)
  return opacity_;
}
inline void Node::set_opacity(float value) {
  
  opacity_ = value;
  // @@protoc_insertion_point(field_set:viro.Node.opacity)
}

// .viro.Node.Geometry geometry = 7;
inline bool Node::has_geometry() const {
  return this != internal_default_instance() && geometry_ != NULL;
}
inline void Node::clear_geometry() {
  if (GetArenaNoVirtual() == NULL && geometry_ != NULL) delete geometry_;
  geometry_ = NULL;
}
inline const ::viro::Node_Geometry& Node::geometry() const {
  // @@protoc_insertion_point(field_get:viro.Node.geometry)
  return geometry_ != NULL ? *geometry_
                         : *::viro::Node_Geometry::internal_default_instance();
}
inline ::viro::Node_Geometry* Node::mutable_geometry() {
  
  if (geometry_ == NULL) {
    geometry_ = new ::viro::Node_Geometry;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.geometry)
  return geometry_;
}
inline ::viro::Node_Geometry* Node::release_geometry() {
  // @@protoc_insertion_point(field_release:viro.Node.geometry)
  
  ::viro::Node_Geometry* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline void Node::set_allocated_geometry(::viro::Node_Geometry* geometry) {
  delete geometry_;
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.geometry)
}

// .viro.Node.Skeleton skeleton = 8;
inline bool Node::has_skeleton() const {
  return this != internal_default_instance() && skeleton_ != NULL;
}
inline void Node::clear_skeleton() {
  if (GetArenaNoVirtual() == NULL && skeleton_ != NULL) delete skeleton_;
  skeleton_ = NULL;
}
inline const ::viro::Node_Skeleton& Node::skeleton() const {
  // @@protoc_insertion_point(field_get:viro.Node.skeleton)
  return skeleton_ != NULL ? *skeleton_
                         : *::viro::Node_Skeleton::internal_default_instance();
}
inline ::viro::Node_Skeleton* Node::mutable_skeleton() {
  
  if (skeleton_ == NULL) {
    skeleton_ = new ::viro::Node_Skeleton;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.skeleton)
  return skeleton_;
}
inline ::viro::Node_Skeleton* Node::release_skeleton() {
  // @@protoc_insertion_point(field_release:viro.Node.skeleton)
  
  ::viro::Node_Skeleton* temp = skeleton_;
  skeleton_ = NULL;
  return temp;
}
inline void Node::set_allocated_skeleton(::viro::Node_Skeleton* skeleton) {
  delete skeleton_;
  skeleton_ = skeleton;
  if (skeleton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.skeleton)
}

// repeated .viro.Node.SkeletalAnimation skeletal_animation = 9;
inline int Node::skeletal_animation_size() const {
  return skeletal_animation_.size();
}
inline void Node::clear_skeletal_animation() {
  skeletal_animation_.Clear();
}
inline const ::viro::Node_SkeletalAnimation& Node::skeletal_animation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.skeletal_animation)
  return skeletal_animation_.Get(index);
}
inline ::viro::Node_SkeletalAnimation* Node::mutable_skeletal_animation(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.skeletal_animation)
  return skeletal_animation_.Mutable(index);
}
inline ::viro::Node_SkeletalAnimation* Node::add_skeletal_animation() {
  // @@protoc_insertion_point(field_add:viro.Node.skeletal_animation)
  return skeletal_animation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation >*
Node::mutable_skeletal_animation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.skeletal_animation)
  return &skeletal_animation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_SkeletalAnimation >&
Node::skeletal_animation() const {
  // @@protoc_insertion_point(field_list:viro.Node.skeletal_animation)
  return skeletal_animation_;
}

// repeated .viro.Node.KeyframeAnimation keyframe_animation = 10;
inline int Node::keyframe_animation_size() const {
  return keyframe_animation_.size();
}
inline void Node::clear_keyframe_animation() {
  keyframe_animation_.Clear();
}
inline const ::viro::Node_KeyframeAnimation& Node::keyframe_animation(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.keyframe_animation)
  return keyframe_animation_.Get(index);
}
inline ::viro::Node_KeyframeAnimation* Node::mutable_keyframe_animation(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.keyframe_animation)
  return keyframe_animation_.Mutable(index);
}
inline ::viro::Node_KeyframeAnimation* Node::add_keyframe_animation() {
  // @@protoc_insertion_point(field_add:viro.Node.keyframe_animation)
  return keyframe_animation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation >*
Node::mutable_keyframe_animation() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.keyframe_animation)
  return &keyframe_animation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_KeyframeAnimation >&
Node::keyframe_animation() const {
  // @@protoc_insertion_point(field_list:viro.Node.keyframe_animation)
  return keyframe_animation_;
}

// repeated .viro.Node.Light light = 11;
inline int Node::light_size() const {
  return light_.size();
}
inline void Node::clear_light() {
  light_.Clear();
}
inline const ::viro::Node_Light& Node::light(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.light)
  return light_.Get(index);
}
inline ::viro::Node_Light* Node::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.light)
  return light_.Mutable(index);
}
inline ::viro::Node_Light* Node::add_light() {
  // @@protoc_insertion_point(field_add:viro.Node.light)
  return light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >*
Node::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.light)
  return &light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node_Light >&
Node::light() const {
  // @@protoc_insertion_point(field_list:viro.Node.light)
  return light_;
}

// .viro.Node.Camera camera = 12;
inline bool Node::has_camera() const {
  return this != internal_default_instance() && camera_ != NULL;
}
inline void Node::clear_camera() {
  if (GetArenaNoVirtual() == NULL && camera_ != NULL) delete camera_;
  camera_ = NULL;
}
inline const ::viro::Node_Camera& Node::camera() const {
  // @@protoc_insertion_point(field_get:viro.Node.camera)
  return camera_ != NULL ? *camera_
                         : *::viro::Node_Camera::internal_default_instance();
}
inline ::viro::Node_Camera* Node::mutable_camera() {
  
  if (camera_ == NULL) {
    camera_ = new ::viro::Node_Camera;
  }
  // @@protoc_insertion_point(field_mutable:viro.Node.camera)
  return camera_;
}
inline ::viro::Node_Camera* Node::release_camera() {
  // @@protoc_insertion_point(field_release:viro.Node.camera)
  
  ::viro::Node_Camera* temp = camera_;
  camera_ = NULL;
  return temp;
}
inline void Node::set_allocated_camera(::viro::Node_Camera* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:viro.Node.camera)
}

// repeated .viro.Node subnode = 13;
inline int Node::subnode_size() const {
  return subnode_.size();
}
inline void Node::clear_subnode() {
  subnode_.Clear();
}
inline const ::viro::Node& Node::subnode(int index) const {
  // @@protoc_insertion_point(field_get:viro.Node.subnode)
  return subnode_.Get(index);
}
inline ::viro::Node* Node::mutable_subnode(int index) {
  // @@protoc_insertion_point(field_mutable:viro.Node.subnode)
  return subnode_.Mutable(index);
}
inline ::viro::Node* Node::add_subnode() {
  // @@protoc_insertion_point(field_add:viro.Node.subnode)
  return subnode_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::viro::Node >*
Node::mutable_subnode() {
  // @@protoc_insertion_point(field_mutable_list:viro.Node.subnode)
  return &subnode_;
}
inline const ::google::protobuf::RepeatedPtrField< ::viro::Node >&
Node::subnode() const {
  // @@protoc_insertion_point(field_list:viro.Node.subnode)
  return subnode_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace viro

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::viro::Node_Geometry_Source_Semantic> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Element_Primitive> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_Visual_WrapMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_Visual_FilterMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_LightingModel> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_CullMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Geometry_Material_BlendMode> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::viro::Node_Light_LightType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Nodes_2eproto__INCLUDED
